<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>配置（Setting）</title>
      <link href="/2019/06/03/django-setting/"/>
      <url>/2019/06/03/django-setting/</url>
      
        <content type="html"><![CDATA[<h1 id="Django的项目设置（Setting）"><a href="#Django的项目设置（Setting）" class="headerlink" title="Django的项目设置（Setting）"></a>Django的项目设置（Setting）</h1><h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h2><p><strong>DJANGO_SETTING_MODULE环境变量</strong>：</p><p>让settings模块被包含到python可以找到的目录下，开发情况下不需要，我们通常会在当前文件夹运行，python可以搜索到。</p><p>如果需要运行在其他服务器上，就必须指定DJANGO_SETTINGS_MODULE变量。</p><h2 id="2-默认设定"><a href="#2-默认设定" class="headerlink" title="2.默认设定"></a>2.默认设定</h2><p>一个django的settings文件不需要我们手动去设置所有项目，因为系统已经默认设置好了。我们只需要修改我们使用的设</p><p>定就好了。默认的设置在django/conf/global_settings.py文件中。</p><p>django在编译时，先载入global_settings.py中的配置，然后加载指定的settings文件，重写改变的设定。</p><p>好了，步入正文。</p><p>前面的随笔中我们经常会改setting配置也经常将一些配置混淆今天主要是将一些常见的配置做一个汇总。</p><h2 id="3-setting配置汇总"><a href="#3-setting配置汇总" class="headerlink" title="3.setting配置汇总"></a><strong>3.setting配置汇总</strong></h2><h3 id="1）项目"><a href="#1）项目" class="headerlink" title="1）项目"></a>1）项目</h3><p>通过os模块，获取当前项目在系统的具体路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line"># 项目路径</span><br><span class="line"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br></pre></td></tr></table></figure><h3 id="2）密钥配置"><a href="#2）密钥配置" class="headerlink" title="2）密钥配置"></a>2）密钥配置</h3><p>随机值，在项目创建的时候生成，主要用于重要数据的加密处理，提高系统的安全性， 主要用于用户密码，CSRF机制和会话Session等数据加密。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SECRET_KEY = &apos;g(eqo*xohqzl9-&amp;&amp;k)-+@5^&amp;_xd+9s9muhe7iy#6$-gv_s_e#f&apos;</span><br></pre></td></tr></table></figure><h3 id="3）调试模式和域名访问权限"><a href="#3）调试模式和域名访问权限" class="headerlink" title="3）调试模式和域名访问权限"></a>3）调试模式和域名访问权限</h3><p>调试模式为布尔值，在开发调试过程中，自动检测代码是否发生更改，根据检测结果执行是否刷新重启系统。</p><p>域名访问权限，设置可访问的域名，默认值为空。</p><p>当开启调试模式时，可访问域名为空，则项目只允许以loaclhost或者127.0.0.1在浏览器访问。</p><p>在生产环境配置时，需要关闭调试模式，并且，此时的ALLOWED_HOSTS为必填项。</p><p>ALLOWED_HOSTS = [‘*’]  表示允许所有域名访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># SECURITY WARNING: don&apos;t run with debug turned on in production!</span><br><span class="line"># 生产环境配置</span><br><span class="line">DEBUG = False</span><br><span class="line">ALLOWED_HOSTS = [&apos;*&apos;]  </span><br><span class="line"></span><br><span class="line"># 测试环境配置</span><br><span class="line">DEBUG = True</span><br><span class="line">ALLOWED_HOSTS = []</span><br></pre></td></tr></table></figure><h3 id="4）app路径"><a href="#4）app路径" class="headerlink" title="4）app路径"></a>4）app路径</h3><p>app列表，django项目里，包含了哪些内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,   # 内置的后台管理系统</span><br><span class="line">    &apos;django.contrib.auth&apos;,   # 内置的用户认证系统</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,   # 记录项目中所有model元数据（Django自带的ORM框架）</span><br><span class="line">    &apos;django.contrib.sessions&apos;,    # 会话功能</span><br><span class="line">    &apos;django.contrib.messages&apos;,   # 消息提示功能</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,   # 查找静态资源路径</span><br><span class="line">    &apos;study.apps.StudyConfig&apos;,    # 自定义App</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="5）中间件"><a href="#5）中间件" class="headerlink" title="5）中间件"></a>5）中间件</h3><p>中间件（MIDDLEWARE）是处理Django的request和response对象的钩子。</p><p>他的主要作用是处理用户请求信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    &apos;django.middleware.security.SecurityMiddleware&apos;,   # 内置的安全机制，保护用户和网站的通信安全</span><br><span class="line">    &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;,  # 会话session功能</span><br><span class="line">    &apos;django.middleware.common.CommonMiddleware&apos;,   # 处理请求信息，规范化请求内容。</span><br><span class="line">    &apos;django.middleware.csrf.CsrfViewMiddleware&apos;,        # 开启CSRF防护功能</span><br><span class="line">    &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;,   # 开启内置的用户认证系统</span><br><span class="line">    &apos;django.contrib.messages.middleware.MessageMiddleware&apos;,   # 开启内置的信息提示功能</span><br><span class="line">    &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,   # 防止恶意程序点击劫持。</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="6）模板路径"><a href="#6）模板路径" class="headerlink" title="6）模板路径"></a>6）模板路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        &apos;BACKEND&apos;: &apos;django.template.backends.django.DjangoTemplates&apos;,   # 定义模板引擎，用户识别模板里面的变量和指令</span><br><span class="line">        &apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates&apos;)]    # 设置模板所在的路径，可配置多个路径</span><br><span class="line">        # 数据类型：列表list，[os.path.join(BASE_DIR, &apos;templates&apos;),os.path.join(BASE_DIR, &apos;study/templates&apos;)]</span><br><span class="line">        ,</span><br><span class="line">        &apos;APP_DIRS&apos;: True,   # 是否在app中查找模板文件</span><br><span class="line">        # 用于填充在RequestContext中上下文的调用函数，一般情况不用修改</span><br><span class="line">        &apos;OPTIONS&apos;: &#123;</span><br><span class="line">            &apos;context_processors&apos;: [</span><br><span class="line">                &apos;django.template.context_processors.debug&apos;,</span><br><span class="line">                &apos;django.template.context_processors.request&apos;,</span><br><span class="line">                &apos;django.contrib.auth.context_processors.auth&apos;,</span><br><span class="line">                &apos;django.contrib.messages.context_processors.messages&apos;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="7）数据库配置"><a href="#7）数据库配置" class="headerlink" title="7）数据库配置"></a><strong>7）数据库配置</strong></h3><p>如果使用django的默认sqlite3数据库则不需要改。</p><p>django一共提供了4种数据引擎，每一种引擎对应一种数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">django.db.backends.sqlite3</span><br><span class="line">django.db.backends.postgresql</span><br><span class="line">django.db.backends.mysql</span><br><span class="line">django.db.backends.oracle</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用mysql数据库需要将上述数据库注掉修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;blog&apos;,   # 数据库名称</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,   #你的数据库用户名</span><br><span class="line">        &apos;PASSWORD&apos;:&apos;&apos; ,   #你的数据库密码</span><br><span class="line">        &apos;HOST&apos;:&apos;&apos;,        #你的数据库主机，留空默认为localhost</span><br><span class="line">        &apos;PORT&apos;:&apos;3306&apos;     #你的数据库端口</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且需要在应用的<strong>init</strong>.py文件添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h3 id="8）语言配置"><a href="#8）语言配置" class="headerlink" title="8）语言配置"></a>8）<strong>语言配置</strong></h3><p>django的目录下，django/conf/locale，可以找到很多的语言包，选择你想要配置的语言包添加进去配置。</p><p>zh_Hans代表中文简体</p><p>zh_Hant代表中文繁体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = &apos;en-us&apos;    #  默认英文</span><br><span class="line">LANGUAGE_CODE = &apos;zh-Hans&apos;    # 修改为中文</span><br></pre></td></tr></table></figure><h3 id="9）时间配置"><a href="#9）时间配置" class="headerlink" title="9）时间配置"></a>9）时间配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TIME_ZONE = &apos;UTC&apos;</span><br><span class="line">TIME_ZONE = &apos;Asia/Shanghai&apos;</span><br></pre></td></tr></table></figure><h3 id="10）时区设置"><a href="#10）时区设置" class="headerlink" title="10）时区设置"></a>10）时区设置</h3><p>​    因为Mysql存储的时间不能灵活设置时区，不像datetime对象有一项参数专门指定时区，所以为了统一全球的时间，必须使用国际标准时间UTC，否则就会乱套。所有时间在存如数据库前，必须转换成UTC时间。比如北京时间8点，存入mysql变成0点（UTC）。</p><p>一般不跨时区的应用，可以不使用时区，即在settings.py设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE_TZ = True</span><br><span class="line"></span><br><span class="line">USE_TZ = False</span><br></pre></td></tr></table></figure><h3 id="11）静态文件目录"><a href="#11）静态文件目录" class="headerlink" title="11）静态文件目录"></a>11）静态文件目录</h3><p>这个路径只用于django提供的静态资源加载服务。</p><p>若部署之后，则这里的配置需要更改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &apos;/static/&apos; #调用时目录</span><br><span class="line">STATICFILES_DIRS=[</span><br><span class="line"> os.path.join(BASE_DIR,&quot;static&quot;), #具体路径</span><br><span class="line">]</span><br><span class="line"># 静态资源文件</span><br><span class="line">STATICFILES_DIRS = (os.path.join(BASE_DIR, &quot;statics&quot;),)   # 现添加的配置,这里是元组，注意逗号</span><br><span class="line">#  我们一般只用 STATIC_URL，但STATIC_URL会按着你的STATICFILES_DIRS去找</span><br></pre></td></tr></table></figure><h3 id="12）如果数据库中的UserInfo-用户表-继承django内置AbstractUser"><a href="#12）如果数据库中的UserInfo-用户表-继承django内置AbstractUser" class="headerlink" title="12）如果数据库中的UserInfo(用户表)继承django内置AbstractUser"></a><strong>12）如果数据库中的UserInfo(用户表)继承django内置AbstractUser</strong></h3><p>1）model需导入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth.models import AbstractUser</span><br></pre></td></tr></table></figure><p>2）配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AUTH_USER_MODEL = &quot;应用名.UserInfo&quot;</span><br></pre></td></tr></table></figure><h3 id="13）session存储的相关配置"><a href="#13）session存储的相关配置" class="headerlink" title="13）session存储的相关配置"></a><strong>13）session存储的相关配置</strong></h3><p>1）数据库配置（默认）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Django默认支持Session，并且默认是将Session数据存储在数据库中，即：django_session 表中。</span><br><span class="line">配置 settings.py</span><br><span class="line"> SESSION_ENGINE = &apos;django.contrib.sessions.backends.db&apos; # 引擎（默认）</span><br><span class="line"> SESSION_COOKIE_NAME ＝ &quot;sessionid&quot;   # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）</span><br><span class="line"> SESSION_COOKIE_PATH ＝ &quot;/&quot;    # Session的cookie保存的路径（默认）</span><br><span class="line"> SESSION_COOKIE_DOMAIN = None    # Session的cookie保存的域名（默认）</span><br><span class="line"> SESSION_COOKIE_SECURE = False    # 是否Https传输cookie（默认）</span><br><span class="line"> SESSION_COOKIE_HTTPONLY = True    # 是否Session的cookie只支持http传输（默认）</span><br><span class="line"> SESSION_COOKIE_AGE = 1209600    # Session的cookie失效日期（2周）（默认）</span><br><span class="line"> SESSION_EXPIRE_AT_BROWSER_CLOSE = False   # 是否关闭浏览器使得Session过期（默认）</span><br><span class="line"> SESSION_SAVE_EVERY_REQUEST = False   # 是否每次请求都保存Session，默认修改之后才保存（默认）</span><br></pre></td></tr></table></figure><p>2）缓存配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">配置 settings.py</span><br><span class="line"> SESSION_ENGINE = &apos;django.contrib.sessions.backends.cache&apos; # 引擎</span><br><span class="line"> SESSION_CACHE_ALIAS = &apos;default&apos;    # 使用的缓存别名（默认内存缓存，也可以是memcache），此处别名依赖缓存的设置</span><br><span class="line"> SESSION_COOKIE_NAME ＝ &quot;sessionid&quot;   # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串</span><br><span class="line"> SESSION_COOKIE_PATH ＝ &quot;/&quot;    # Session的cookie保存的路径</span><br><span class="line"> SESSION_COOKIE_DOMAIN = None    # Session的cookie保存的域名</span><br><span class="line"> SESSION_COOKIE_SECURE = False    # 是否Https传输cookie</span><br><span class="line"> SESSION_COOKIE_HTTPONLY = True    # 是否Session的cookie只支持http传输</span><br><span class="line"> SESSION_COOKIE_AGE = 1209600    # Session的cookie失效日期（2周）</span><br><span class="line"> SESSION_EXPIRE_AT_BROWSER_CLOSE = False   # 是否关闭浏览器使得Session过期</span><br><span class="line"> SESSION_SAVE_EVERY_REQUEST = False   # 是否每次请求都保存Session，默认修改之后才保存</span><br></pre></td></tr></table></figure><p>3）默认配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">配置 settings.py</span><br><span class="line"> SESSION_ENGINE = &apos;django.contrib.sessions.backends.file&apos; # 引擎</span><br><span class="line"> SESSION_FILE_PATH = None     # 缓存文件路径，如果为None，则使用tempfile模块获取一个临时地址tempfile.gettempdir() </span><br><span class="line"> SESSION_COOKIE_NAME ＝ &quot;sessionid&quot;    # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串</span><br><span class="line"> SESSION_COOKIE_PATH ＝ &quot;/&quot;     # Session的cookie保存的路径</span><br><span class="line"> SESSION_COOKIE_DOMAIN = None    # Session的cookie保存的域名</span><br><span class="line"> SESSION_COOKIE_SECURE = False    # 是否Https传输cookie</span><br><span class="line"> SESSION_COOKIE_HTTPONLY = True    # 是否Session的cookie只支持http传输</span><br><span class="line"> SESSION_COOKIE_AGE = 1209600    # Session的cookie失效日期（2周）</span><br><span class="line"> SESSION_EXPIRE_AT_BROWSER_CLOSE = False   # 是否关闭浏览器使得Session过期</span><br><span class="line"> SESSION_SAVE_EVERY_REQUEST = False    # 是否每次请求都保存Session，默认修改之后才保存</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>1）也可以自定义配置 但是自定义的配置都要写到配置文件最后 代码中使用时可以导入配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from django.conf import settings</span><br><span class="line">settings.配置名</span><br></pre></td></tr></table></figure><p>2）上面所有配置都是针对特定问题需要修改的 系统默认配置不做说明</p><p>3）上面配置只是前面django系列随笔所遇到的常用配置 后续所遇配置都会逐步在此随笔中持续添加跟新</p><h2 id="4-日志配置详解"><a href="#4-日志配置详解" class="headerlink" title="4.日志配置详解"></a>4.日志配置详解</h2><h3 id="1）Logger"><a href="#1）Logger" class="headerlink" title="1）Logger"></a>1）Logger</h3><p>记录器是记录系统的入口点。每个记录器都是一个命名存储桶，可以将消息写入进行处理。</p><p>记录器配置为具有<em>日志级别</em>。此日志级别描述了记录器将处理的消息的严重性。Python定义了以下日志级别：</p><ul><li><code>DEBUG</code>：用于调试目的的低级系统信息</li><li><code>INFO</code>：一般系统信息</li><li><code>WARNING</code>：描述已发生的小问题的信息。</li><li><code>ERROR</code>：描述已发生的主要问题的信息。</li><li><code>CRITICAL</code>：描述已发生的严重问题的信息。</li></ul><p>一旦记录器确定需要处理消息，它就会传递给<em>处理程序</em>。</p><h3 id="2）处理程序"><a href="#2）处理程序" class="headerlink" title="2）处理程序"></a>2）处理程序</h3><p>处理程序是确定记录器中每条消息发生情况的引擎。它描述了特定的日志记录行为，例如将消息写入屏幕，文件或网络套接字。</p><p>与记录器一样，处理程序也具有日志级别。如果日志记录的日志级别未达到或超过处理程序的级别，则处理程序将忽略该消息。</p><p>记录器可以有多个处理程序，每个处理程序可以具有不同的日志级别。以这种方式，可以根据消息的重要性提供不同形式的通知。</p><h3 id="3）过滤器"><a href="#3）过滤器" class="headerlink" title="3）过滤器"></a>3）过滤器</h3><ul><li>过滤器用于提供对从记录器到处理程序的日志记录传递的额外控制。</li><li>默认情况下，将处理满足日志级别要求的任何日志消息。但是，通过安装筛选器，您可以在日志记录过程中添加其他条件<ul><li>例如，您可以安装仅允许<code>ERROR</code>发出来自特定源的消息的过滤器。</li></ul></li><li>过滤器还可用于在发出之前修改日志记录。<ul><li>例如，如果满足一组特定条件，您可以编写一个过滤器，将<code>ERROR</code>日志记录降级 为<code>WARNING</code>记录。</li></ul></li><li>过滤器可以安装在记录器或处理器上; 可以在链中使用多个过滤器来执行多个过滤操作。</li></ul><h3 id="4）格式化程序"><a href="#4）格式化程序" class="headerlink" title="4）格式化程序"></a>4）格式化程序</h3><p>​    最终，日志记录需要呈现为文本。格式化程序描述该文本的确切格式。格式化程序通常由包含LogRecord属性的Python格式化字符串组成 ; 但是，您也可以编写自定义格式化程序来实现特定的格式化行为。</p><h3 id="5）使用日志记录"><a href="#5）使用日志记录" class="headerlink" title="5）使用日志记录"></a>5）使用日志记录</h3><p>配置记录器，处理程序，过滤器和格式化程序后，需要将日志记录调用放入代码中。使用日志框架非常简单。这是一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># import the logging library</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line"># Get an instance of a logger</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">def my_view(request, arg1, arg):</span><br><span class="line">    ...</span><br><span class="line">    if bad_mojo:</span><br><span class="line">        # Log an error message</span><br><span class="line">        logger.error(&apos;Something went wrong!&apos;)</span><br></pre></td></tr></table></figure><h3 id="6）配置日志记录"><a href="#6）配置日志记录" class="headerlink" title="6）配置日志记录"></a>6）配置日志记录</h3><p>常用配置，日志配置例子2个，以供大家参考。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">cur_path = os.path.dirname(os.path.realpath(__file__))  # log_path是存放日志的路径</span><br><span class="line">log_path = os.path.join(os.path.dirname(cur_path), &apos;logs&apos;)</span><br><span class="line">if not os.path.exists(log_path): os.mkdir(log_path)  # 如果不存在这个logs文件夹，就自动创建一个</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">BASE_LOG_DIR = os.path.join(BASE_DIR, &quot;log&quot;)</span><br><span class="line"></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    &apos;version&apos;: 1,</span><br><span class="line">    &apos;disable_existing_loggers&apos;: False,</span><br><span class="line">    &apos;formatters&apos;: &#123;</span><br><span class="line">        &apos;standard&apos;: &#123;</span><br><span class="line">            &apos;format&apos;: &apos;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&apos;</span><br><span class="line">                      &apos;[%(levelname)s][%(message)s]&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;simple&apos;: &#123;</span><br><span class="line">            &apos;format&apos;: &apos;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;collect&apos;: &#123;</span><br><span class="line">            &apos;format&apos;: &apos;%(message)s&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;filters&apos;: &#123;</span><br><span class="line">        &apos;require_debug_true&apos;: &#123;</span><br><span class="line">            &apos;()&apos;: &apos;django.utils.log.RequireDebugTrue&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;handlers&apos;: &#123;</span><br><span class="line">        &apos;console&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;DEBUG&apos;,</span><br><span class="line">            &apos;filters&apos;: [&apos;require_debug_true&apos;],  # 只有在Django debug为True时才在屏幕打印日志</span><br><span class="line">            &apos;class&apos;: &apos;logging.StreamHandler&apos;,</span><br><span class="line">            &apos;formatter&apos;: &apos;simple&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;SF&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;,  # 保存到文件，根据文件大小自动切</span><br><span class="line">            &apos;filename&apos;: os.path.join(BASE_LOG_DIR, &quot;xxx_info.log&quot;),  # 日志文件</span><br><span class="line">            &apos;maxBytes&apos;: 1024 * 1024 * 50,  # 日志大小 50M</span><br><span class="line">            &apos;backupCount&apos;: 3,  # 备份数为3  xx.log --&gt; xx.log.1 --&gt; xx.log.2 --&gt; xx.log.3</span><br><span class="line">            &apos;formatter&apos;: &apos;standard&apos;,</span><br><span class="line">            &apos;encoding&apos;: &apos;utf-8&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;TF&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.handlers.TimedRotatingFileHandler&apos;,  # 保存到文件，根据时间自动切</span><br><span class="line">            &apos;filename&apos;: os.path.join(BASE_LOG_DIR, &quot;xxx_info.log&quot;),  # 日志文件</span><br><span class="line">            &apos;backupCount&apos;: 3,  # 备份数为3  xx.log --&gt; xx.log.2018-08-23_00-00-00 --&gt; xx.log.2018-08-24_00-00-00 --&gt; ...</span><br><span class="line">            &apos;when&apos;: &apos;D&apos;,  # 每天一切， 可选值有S/秒 M/分 H/小时 D/天 W0-W6/周(0=周一) midnight/如果没指定时间就默认在午夜</span><br><span class="line">            &apos;formatter&apos;: &apos;standard&apos;,</span><br><span class="line">            &apos;encoding&apos;: &apos;utf-8&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;error&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;ERROR&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;,  # 保存到文件，自动切</span><br><span class="line">            &apos;filename&apos;: os.path.join(BASE_LOG_DIR, &quot;xxx_err.log&quot;),  # 日志文件</span><br><span class="line">            &apos;maxBytes&apos;: 1024 * 1024 * 5,  # 日志大小 50M</span><br><span class="line">            &apos;backupCount&apos;: 5,</span><br><span class="line">            &apos;formatter&apos;: &apos;standard&apos;,</span><br><span class="line">            &apos;encoding&apos;: &apos;utf-8&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;collect&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;,  # 保存到文件，自动切</span><br><span class="line">            &apos;filename&apos;: os.path.join(BASE_LOG_DIR, &quot;xxx_collect.log&quot;),</span><br><span class="line">            &apos;maxBytes&apos;: 1024 * 1024 * 50,  # 日志大小 50M</span><br><span class="line">            &apos;backupCount&apos;: 5,</span><br><span class="line">            &apos;formatter&apos;: &apos;collect&apos;,</span><br><span class="line">            &apos;encoding&apos;: &quot;utf-8&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;loggers&apos;: &#123;</span><br><span class="line">        &apos;&apos;: &#123;  # 默认的logger应用如下配置</span><br><span class="line">            &apos;handlers&apos;: [&apos;SF&apos;, &apos;console&apos;, &apos;error&apos;],  # 上线之后可以把&apos;console&apos;移除</span><br><span class="line">            &apos;level&apos;: &apos;DEBUG&apos;,</span><br><span class="line">            &apos;propagate&apos;: True,</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;collect&apos;: &#123;  # 名为 &apos;collect&apos;的logger还单独处理</span><br><span class="line">            &apos;handlers&apos;: [&apos;console&apos;, &apos;collect&apos;],</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    &apos;version&apos;: 1,</span><br><span class="line">    &apos;disable_existing_loggers&apos;: True,</span><br><span class="line">    &apos;formatters&apos;: &#123;</span><br><span class="line">        # 日志格式</span><br><span class="line">        &apos;standard&apos;: &#123;</span><br><span class="line">            &apos;format&apos;: &apos;[%(asctime)s] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] &apos;</span><br><span class="line">                      &apos;[%(levelname)s]- %(message)s&apos;&#125;,</span><br><span class="line">        &apos;simple&apos;: &#123;  # 简单格式</span><br><span class="line">            &apos;format&apos;: &apos;%(levelname)s %(message)s&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    # 过滤</span><br><span class="line">    &apos;filters&apos;: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    # 定义具体处理日志的方式</span><br><span class="line">    &apos;handlers&apos;: &#123;</span><br><span class="line">        # 默认记录所有日志</span><br><span class="line">        &apos;default&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;,</span><br><span class="line">            &apos;filename&apos;: os.path.join(log_path, &apos;all-&#123;&#125;.log&apos;.format(time.strftime(&apos;%Y-%m-%d&apos;))),</span><br><span class="line">            &apos;maxBytes&apos;: 1024 * 1024 * 5,  # 文件大小</span><br><span class="line">            &apos;backupCount&apos;: 5,  # 备份数</span><br><span class="line">            &apos;formatter&apos;: &apos;standard&apos;,  # 输出格式</span><br><span class="line">            &apos;encoding&apos;: &apos;utf-8&apos;,  # 设置默认编码，否则打印出来汉字乱码</span><br><span class="line">        &#125;,</span><br><span class="line">        # 输出错误日志</span><br><span class="line">        &apos;error&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;ERROR&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;,</span><br><span class="line">            &apos;filename&apos;: os.path.join(log_path, &apos;error-&#123;&#125;.log&apos;.format(time.strftime(&apos;%Y-%m-%d&apos;))),</span><br><span class="line">            &apos;maxBytes&apos;: 1024 * 1024 * 5,  # 文件大小</span><br><span class="line">            &apos;backupCount&apos;: 5,  # 备份数</span><br><span class="line">            &apos;formatter&apos;: &apos;standard&apos;,  # 输出格式</span><br><span class="line">            &apos;encoding&apos;: &apos;utf-8&apos;,  # 设置默认编码</span><br><span class="line">        &#125;,</span><br><span class="line">        # 控制台输出</span><br><span class="line">        &apos;console&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;DEBUG&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.StreamHandler&apos;,</span><br><span class="line">            &apos;formatter&apos;: &apos;standard&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        # 输出info日志</span><br><span class="line">        &apos;info&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;,</span><br><span class="line">            &apos;filename&apos;: os.path.join(log_path, &apos;info-&#123;&#125;.log&apos;.format(time.strftime(&apos;%Y-%m-%d&apos;))),</span><br><span class="line">            &apos;maxBytes&apos;: 1024 * 1024 * 5,</span><br><span class="line">            &apos;backupCount&apos;: 5,</span><br><span class="line">            &apos;formatter&apos;: &apos;standard&apos;,</span><br><span class="line">            &apos;encoding&apos;: &apos;utf-8&apos;,  # 设置默认编码</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    # 配置用哪几种 handlers 来处理日志</span><br><span class="line">    &apos;loggers&apos;: &#123;</span><br><span class="line">        # 类型 为 django 处理所有类型的日志， 默认调用</span><br><span class="line">        &apos;django&apos;: &#123;</span><br><span class="line">            &apos;handlers&apos;: [&apos;default&apos;, &apos;console&apos;],</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">            &apos;propagate&apos;: False</span><br><span class="line">        &#125;,</span><br><span class="line">        # log 调用时需要当作参数传入</span><br><span class="line">        &apos;log&apos;: &#123;</span><br><span class="line">            &apos;handlers&apos;: [&apos;error&apos;, &apos;info&apos;, &apos;console&apos;, &apos;default&apos;],</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">            &apos;propagate&apos;: True</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7）添加发送邮件"><a href="#7）添加发送邮件" class="headerlink" title="7）添加发送邮件"></a>7）添加发送邮件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#管理员邮箱</span><br><span class="line">ADMINS = (</span><br><span class="line"> (&apos;laixintao&apos;,&apos;*******@163.com&apos;),</span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line">#非空链接，却发生404错误，发送通知MANAGERS</span><br><span class="line">SEND_BROKEN_LINK_EMAILS = True</span><br><span class="line">MANAGERS = ADMINS</span><br><span class="line">  </span><br><span class="line">#Email设置</span><br><span class="line">EMAIL_BACKEND = &apos;django.core.mail.backends.smtp.EmailBackend&apos;</span><br><span class="line">EMAIL_HOST= &apos;smtp.163.com&apos;#QQ邮箱SMTP服务器(邮箱需要开通SMTP服务)</span><br><span class="line">EMAIL_PORT= 25 #QQ邮箱SMTP服务端口</span><br><span class="line">EMAIL_HOST_USER = &apos;**********@163.com&apos; #我的邮箱帐号</span><br><span class="line">EMAIL_HOST_PASSWORD = &apos;**************&apos; #授权码</span><br><span class="line">EMAIL_SUBJECT_PREFIX = &apos;website&apos; #为邮件标题的前缀,默认是&apos;[django]&apos;</span><br><span class="line">EMAIL_USE_TLS = True #开启安全链接</span><br><span class="line">DEFAULT_FROM_EMAIL = SERVER_EMAIL = EMAIL_HOST_USER #设置发件人</span><br><span class="line">  </span><br><span class="line">#logging日志配置</span><br><span class="line">LOGGING = &#123;</span><br><span class="line"> &apos;version&apos;: 1,</span><br><span class="line"> &apos;disable_existing_loggers&apos;: True,</span><br><span class="line"> &apos;formatters&apos;: &#123;#日志格式 </span><br><span class="line"> &apos;standard&apos;: &#123;</span><br><span class="line">  &apos;format&apos;: &apos;%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s&apos;&#125; </span><br><span class="line"> &#125;,</span><br><span class="line"> &apos;filters&apos;: &#123;#过滤器</span><br><span class="line"> &apos;require_debug_false&apos;: &#123;</span><br><span class="line">  &apos;()&apos;: &apos;django.utils.log.RequireDebugFalse&apos;,</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> &apos;handlers&apos;: &#123;#处理器</span><br><span class="line"> &apos;null&apos;: &#123;</span><br><span class="line">  &apos;level&apos;: &apos;DEBUG&apos;,</span><br><span class="line">  &apos;class&apos;: &apos;logging.NullHandler&apos;,</span><br><span class="line"> &#125;,</span><br><span class="line"> &apos;mail_admins&apos;: &#123;#发送邮件通知管理员</span><br><span class="line">  &apos;level&apos;: &apos;ERROR&apos;,</span><br><span class="line">  &apos;class&apos;: &apos;django.utils.log.AdminEmailHandler&apos;,</span><br><span class="line">  &apos;filters&apos;: [&apos;require_debug_false&apos;],# 仅当 DEBUG = False 时才发送邮件</span><br><span class="line">  &apos;include_html&apos;: True,</span><br><span class="line"> &#125;,</span><br><span class="line"> &apos;debug&apos;: &#123;#记录到日志文件(需要创建对应的目录，否则会出错)</span><br><span class="line">  &apos;level&apos;:&apos;DEBUG&apos;,</span><br><span class="line">  &apos;class&apos;:&apos;logging.handlers.RotatingFileHandler&apos;,</span><br><span class="line">  &apos;filename&apos;: os.path.join(BASE_DIR, &quot;log&quot;,&apos;debug.log&apos;),#日志输出文件</span><br><span class="line">  &apos;maxBytes&apos;:1024*1024*5,#文件大小 </span><br><span class="line">  &apos;backupCount&apos;: 5,#备份份数</span><br><span class="line">  &apos;formatter&apos;:&apos;standard&apos;,#使用哪种formatters日志格式</span><br><span class="line"> &#125;,</span><br><span class="line"> &apos;console&apos;:&#123;#输出到控制台</span><br><span class="line">  &apos;level&apos;: &apos;DEBUG&apos;,</span><br><span class="line">  &apos;class&apos;: &apos;logging.StreamHandler&apos;,</span><br><span class="line">  &apos;formatter&apos;: &apos;standard&apos;,</span><br><span class="line"> &#125;,</span><br><span class="line"> &#125;,</span><br><span class="line"> &apos;loggers&apos;: &#123;#logging管理器</span><br><span class="line"> &apos;django&apos;: &#123;</span><br><span class="line">  &apos;handlers&apos;: [&apos;console&apos;],</span><br><span class="line">  &apos;level&apos;: &apos;DEBUG&apos;,</span><br><span class="line">  &apos;propagate&apos;: False</span><br><span class="line"> &#125;,</span><br><span class="line"> &apos;django.request&apos;: &#123;</span><br><span class="line">  &apos;handlers&apos;: [&apos;debug&apos;,&apos;mail_admins&apos;],</span><br><span class="line">  &apos;level&apos;: &apos;ERROR&apos;,</span><br><span class="line">  &apos;propagate&apos;: True,</span><br><span class="line"> &#125;,</span><br><span class="line"> # 对于不在 ALLOWED_HOSTS 中的请求不发送报错邮件</span><br><span class="line"> &apos;django.security.DisallowedHost&apos;: &#123;</span><br><span class="line">  &apos;handlers&apos;: [&apos;null&apos;],</span><br><span class="line">  &apos;propagate&apos;: False,</span><br><span class="line"> &#125;,</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的配置文件中，有三个日志处理器。分别是：</p><ul><li>‘django.request’：django的request发生error会自动记录，然后使用debug将信息记录到文件，还有mail_admins将信息通过邮件发送给管理员。这里邮件的功能非常棒！并不是一个纯文本信息，而是一个html文件，和我们在浏览器看到的错误页面一模一样！要正常使用邮件功能需要像我一样配置一下上面的邮件发件人信息。我是直接去网易申请了一个邮箱。要格外注意三点：<ul><li>一定要去邮件服务商开启SMTP服务；</li><li>不同的邮件服务商可能有一些特殊的设置，比如网易，会给你一个客户端授权码，这个才是密码，而不是网页的登录密码。</li><li>注意服务商有没有对发信频率的限制。</li></ul></li><li>‘django’：使用console处理器，将信息输出。在开发的时候就可以使用这个处理器（什么？print？ 太low了！）</li><li>最后一个处理器见注</li><li>释</li></ul><h3 id="8）日志模块流程图"><a href="#8）日志模块流程图" class="headerlink" title="8）日志模块流程图"></a>8）日志模块流程图</h3><p><img src="//angeszhu.github.io/2019/06/03/django-setting/1.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django安装以及创建项目</title>
      <link href="/2019/06/01/install-django/"/>
      <url>/2019/06/01/install-django/</url>
      
        <content type="html"><![CDATA[<h2 id="Django安装以及创建项目"><a href="#Django安装以及创建项目" class="headerlink" title="Django安装以及创建项目"></a>Django安装以及创建项目</h2><h3 id="Django安装"><a href="#Django安装" class="headerlink" title="Django安装"></a>Django安装</h3><h4 id="Python版本以及Django版本选择"><a href="#Python版本以及Django版本选择" class="headerlink" title="Python版本以及Django版本选择"></a>Python版本以及Django版本选择</h4><p>Django2.0以上版本，支持Python3.4以上的版本，而取消对Python2的支持。</p><p>而Django 1.11是支持Python2.7的最后版本。</p><h4 id="压缩包下载安装"><a href="#压缩包下载安装" class="headerlink" title="压缩包下载安装"></a>压缩包下载安装</h4><p><a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">下载Django</a></p><p><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#sendkeys" target="_blank" rel="noopener">下载Python的第三方库包地址</a></p><p>下载 Django 压缩包，</p><p>解压并和Python安装目录放在同一个根目录，</p><p>进入 Django 目录，执行python setup.py install，</p><p>然后开始安装，Django将要被安装到Python的Lib下site-packages。</p><p><img src="//angeszhu.github.io/2019/06/01/install-django/1.png" alt></p><p>然后是配置环境变量，将这几个目录添加到系统环境变量中: </p><p>C:\Python33\Lib\site-packages\django;C:\Python33\Scripts。 </p><p>添加完成后就可以使用Django的django-admin.py命令新建工程了。</p><p><img src="//angeszhu.github.io/2019/06/01/install-django/2.png" alt></p><h4 id="Pip命令安装"><a href="#Pip命令安装" class="headerlink" title="Pip命令安装"></a>Pip命令安装</h4><p>在终端输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Django</span><br></pre></td></tr></table></figure><p>如果想要制定Django版本，那么可以输入，当然版本号可以根据需要来输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Django==2.0.5</span><br></pre></td></tr></table></figure><h4 id="检查Django是否安装成功"><a href="#检查Django是否安装成功" class="headerlink" title="检查Django是否安装成功"></a>检查Django是否安装成功</h4><p>输入以下命令进行检查：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import django</span><br><span class="line">django.__version__</span><br></pre></td></tr></table></figure><p>如果出现如下图一样的内容，那么证明你安装成功了。</p><p><img src="//angeszhu.github.io/2019/06/01/install-django/3.png" alt></p><h3 id="Django项目的创建"><a href="#Django项目的创建" class="headerlink" title="Django项目的创建"></a>Django项目的创建</h3><h4 id="1-命令行创建django项目"><a href="#1-命令行创建django项目" class="headerlink" title="1.命令行创建django项目"></a>1.命令行创建django项目</h4><p>在终端输入命令:django-admin startproject 项目名称</p><p>注意:你在哪个目录输入命令创建，你的项目就会创建到哪里 </p><h4 id="2-使用编译器创建Django项目"><a href="#2-使用编译器创建Django项目" class="headerlink" title="2.使用编译器创建Django项目"></a>2.使用编译器创建Django项目</h4><p>选择:File -&gt; New Project </p><p>选择django，填写django项目名称，</p><p>选择环境运行的sdk以及django配置，是否创建app，app名称等内容</p><p><img src="//angeszhu.github.io/2019/06/01/install-django/4.png" alt></p><h4 id="3-Django的目录结构"><a href="#3-Django的目录结构" class="headerlink" title="3.Django的目录结构"></a>3.Django的目录结构</h4><p><img src="//angeszhu.github.io/2019/06/01/install-django/5.png" alt></p><p>一个Django项目，可以包含多个项目应用，</p><p>这些应用在Django中，又可以称为app。 </p><p>每一个app代表网站的一个，或多个网页。</p><p>创建 app时，可以进入项目目录，</p><p>然后用命令： python manage.py startapp app名称 创建 </p><p>也可以在pycharm创建项目时，就一起创建好，pycharm给我们提供了这样的功能。</p><h4 id="4-Django项目的启动"><a href="#4-Django项目的启动" class="headerlink" title="4.Django项目的启动"></a>4.Django项目的启动</h4><p>1.命令行启动</p><p>python manage.py runserver 2.pycharm启动</p><p><img src="//angeszhu.github.io/2019/06/01/install-django/6.png" alt></p><p>在图中我们可以看到，右上角的运行附近，有一个选择框。 </p><p>这里可以选择我们的django项目，点击右侧三角，即可运行django调试服务器。 </p><p>而另外一个选项，Edit，可以配置我们django项目启动的一些信息，例如:ip、端口号等</p><p><img src="//angeszhu.github.io/2019/06/01/install-django/7.png" alt></p><p>如果没有Dj启动，也可以利用Edit添加一个Django启动。</p><p>但是添加的时候要跟Django配置的一样。</p><p><img src="//angeszhu.github.io/2019/06/01/install-django/8.png" alt></p><p><img src="//angeszhu.github.io/2019/06/01/install-django/9.png" alt></p><p>这里最重要的，就是在设置中，把setting加载进去。 </p><p>启动后在浏览器输入地址:127.0.0.1:8000 可以打开成功页面，即项目创建成功</p><p><img src="//angeszhu.github.io/2019/06/01/install-django/10.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django介绍</title>
      <link href="/2019/06/01/django-info/"/>
      <url>/2019/06/01/django-info/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Django"><a href="#什么是Django" class="headerlink" title="什么是Django"></a>什么是Django</h2><h3 id="django-Python-Web-框架"><a href="#django-Python-Web-框架" class="headerlink" title="django(Python Web 框架)"></a>django(Python Web 框架)</h3><blockquote><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MVC的框架模式，即模型M，视图V和控 制器C。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS(内容 管理系统)软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p></blockquote><h3 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h3><p>Django是一个基于MVC构造的框架。</p><p>但是在Django中，控制器接受用户输入的部分由框架自行处理，</p><p>所以 Django 里更关注的是模型(Model)、模板(Template)和视图(Views)，称为 MTV模式。</p><p>它们各自的职责 如下:</p><table><thead><tr><th>层次</th><th align="center">职责</th></tr></thead><tbody><tr><td>模型(Model)，即数 据存取层</td><td align="center">处理与数据相关的所有事务: 如何存取、如何验证有效性、包含哪些行为 以及数据之间的关系等。</td></tr><tr><td>模板(Template)，即表 现层</td><td align="center">处理与表现相关的决定: 如何在页面或其他类型文档中进行显示。</td></tr><tr><td>视图(View)，即业务 逻辑层</td><td align="center">存取模型及调取恰当模板的相关逻辑。模型与模板的桥梁。</td></tr></tbody></table><hr><p>从以上表述可以看出Django视图不处理用户输入，而仅仅决定要展现哪些数据给用户，</p><p>而Django模板仅仅决定如何展现Django视图指定的数据。</p><p>或者说, Django将MVC中的视图进一步分解为 Django视图 和 Django模板两个部分，</p><p>分别决定 “展现哪些数据” 和 “如何展现”，使得Django的模板可以根据需要随时替 换，而不仅仅限制于内置的模板。</p><hr><p>至于MVC控制器部分，由Django框架的URLconf来实现。URLconf机制是使用正则表达式匹配URL，</p><p>然后调 用合适的Python函数。URLconf对于URL的规则没有任何限制，你完全可以设计成任意的URL风格，</p><p>不管是 传统的，RESTful的，或者是另类的。</p><p>框架把控制层给封装了，无非与数据交互这层都是数据库表的读,写,删 除,更新的操作。</p><p>在写程序的时候，只要调用相应的方法就行了，感觉很方便。</p><p>程序员把控制层东西交给 Django自动完成了。 </p><p>只需要编写非常少的代码完成很多的事情。</p><p>所以，它比MVC框架考虑的问题要深一 步，因为我们程序员大都在写控制层的程序。</p><p>现在这个工作交给了框架，仅需写很少的调用代码，大大提高 了工作效率。</p><hr><p>Django的主要目的是简便、快速的开发数据库驱动的网站。</p><p>它强调代码复用，多个组件可以很方便的以“插 件”形式服务于整个框架，</p><p>Django有许多功能强大的第三方插件，你甚至可以很方便的开发出自己的工具包。</p><p>这使得Django具有很强的可扩展性。</p><p>它还强调快速开发和DRY(Do Not Repeat Yourself)原则。</p><hr><p>Django基于MVC的设计十分优美:</p><ul><li>对象关系映射 (ORM,object-relational mapping):<ul><li>以Python类形式定义你的数据模型，ORM将模型与 关系数据库连接起来，你将得到一个非常容易使用的数据库API，同时你也可以在Django中使用原始的 SQL语句。</li></ul></li><li>URL 分派:<ul><li>使用正则表达式匹配URL，你可以设计任意的URL，没有框架的特定限定。像你喜欢的一样 灵活。 </li></ul></li><li>模版系统:<ul><li>使用Django强大而可扩展的模板语言，可以分隔设计、内容和Python代码。并且具有可继 承性。 </li></ul></li><li>表单处理:<ul><li>你可以方便的生成各种表单模型，实现表单的有效性检验。可以方便的从你定义的模型实例 生成相应的表单。</li></ul></li><li>Cache系统:<ul><li>可以挂在内存缓冲或其它的框架实现超级缓冲 – 实现你所需要的粒度。 </li></ul></li><li>会话(session)，用户登录与权限检查，快速开发用户会话功能。 </li><li>国际化:<ul><li>内置国际化系统，方便开发出多种语言的网站。 </li></ul></li><li>自动化的管理界面:<ul><li>不需要你花大量的工作来创建人员管理和更新内容。Django自带一个ADMIN site, 类似于内容管理系统</li></ul></li></ul><h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><p><img src="//angeszhu.github.io/2019/06/01/django-info/1.png" alt></p><p>1.用manage .py runserver 启动Django服务器时就载入了在同一目录下的settings .py。该文件包含了项目 中的配置信息，如前面讲的URLConf等，其中最重要的配置就是ROOT_URLCONF，它告诉Django哪个 Python模块应该用作本站的URLConf，默认的是urls .py<br>2.当访问url的时候，Django会根据ROOT_URLCONF的设置来装载URLConf。 3.然后按顺序逐个匹配URLConf里的URLpatterns。如果找到则会调用相关联的视图函数，并把<br>HttpRequest对象作为第一个参数(通常是request) 4.最后该view函数负责返回一个HttpResponse对象</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>(点击可进入)</p><p><a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="noopener">The Django Book</a></p><p><a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django官方网站</a></p><p><a href="https://docs.djangoproject.com/zh-hans/2.2/intro/tutorial01/" target="_blank" rel="noopener">Django官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python环境的安装</title>
      <link href="/2019/05/31/install-python/"/>
      <url>/2019/05/31/install-python/</url>
      
        <content type="html"><![CDATA[<h2 id="Python安装以及Pycharm安装"><a href="#Python安装以及Pycharm安装" class="headerlink" title="Python安装以及Pycharm安装"></a>Python安装以及Pycharm安装</h2><p>本篇简单介绍一下Python的开发环境的安装</p><a id="more"></a><h3 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h3><blockquote><p>目前，根据数据显示，使用Python2.xd 开发者站63.7%，而使用Python3.x的用户站36.3%，由此可见使用使用Python2.x的用户还是占多数。2014年，Python的创始人宣布将Python2.7支持时间延长到2020年，那么初学者应该选择什么版本呢？目前建议初学者选择Python3.x版本<br>1、目前，使用Python3.x是大势所趋<br>2、Python3.x在Python2.x的基础上做了功能升级<br>3、Python3.x和Python2.x思想基本是共通的<br>当然选择Python3.x也会有缺点，那就是很多扩展库的发行总是滞后于Python的发行版本，甚至目前还有很多库不支持Python3.x。因此，在选择Python时候，一定要先考虑清楚自己的学习目的，例如，打算做哪方面的开发、需要用到哪些扩展库，以及扩展库支持的最高Python版本等。明确这些问题后再做出适合自己的选择。</p></blockquote><p>我们这里选择的介绍安装的版本是Python 3.7.2</p><h3 id="Python安装"><a href="#Python安装" class="headerlink" title="Python安装"></a>Python安装</h3><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><p>首先我们需要去官网选择我们想要下载的Python版本。</p><p><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">Python官网下载地址点击跳转</a></p><p><img src="//angeszhu.github.io/2019/05/31/install-python/downloadpage.png" alt></p><p>可以在页面中选择您想要下载安装的python版本</p><p>我们选择的版本是Python3.7.2 </p><p>选择版本后，进入下一个页面，页面拖到最下方，我们可以看到一个表格。</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/1.png" alt></p><p>我们可以在这个表格中，根据您的操作系统等，来选择您想要下载安装的Python安装包。 </p><p>我们本教程选择的版本是:</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/2.png" alt></p><p>点击后，即可下载Python安装包。</p><h4 id="安装Python（Windows系统）"><a href="#安装Python（Windows系统）" class="headerlink" title="安装Python（Windows系统）"></a>安装Python（Windows系统）</h4><p>双击我们下载好的安装包，打开安装界面(如下图)。</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/3.png" alt></p><p>红圈块的地方，给大家详细说明一下。 </p><h5 id="1-默认安装"><a href="#1-默认安装" class="headerlink" title="1.默认安装"></a>1.默认安装</h5><p>这里的默认安装，包含了Python的安装目录，我们可以看到红圈中的路径，那个路径，就是我们Python安装完的路径。</p><h5 id="2-自定义安装"><a href="#2-自定义安装" class="headerlink" title="2.自定义安装"></a>2.自定义安装</h5><p><img src="//angeszhu.github.io/2019/05/31/install-python/4.png" alt></p><p><img src="//angeszhu.github.io/2019/05/31/install-python/5.png" alt></p><p>在下面的步骤中，我们可以选择安装的很多内容，这里我们需要注意的就是这个安装目录。 </p><p>由于Window启动和运行的一些问题，我们并不推荐安装至C盘，所以大家尽量换一个盘来装。</p><p>我们这里换到了D盘。</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/6.png" alt></p><h5 id="3-添加Python至环境变量"><a href="#3-添加Python至环境变量" class="headerlink" title="3.添加Python至环境变量"></a>3.添加Python至环境变量</h5><p>环境变量这里，大家一定要勾选，因为可以节省我们很多事情。防止因为环境变量配置错误而出现异常。</p><p>点击安装后，Python就已经开始安装了。</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/7.png" alt></p><p>当出现如上图时，证明我们的Python就已经安装成功了。 </p><p>我们现在就可以来检查一下Python是否安装成功了。 </p><p>win+R 输入cmd 打开我们的dos界面，输入python</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/8.png" alt></p><p>当出现如上图时，证明我们的python正确安装了。 </p><p>输入pip，可以查看我们的pip是否可以正常使用。</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/9.png" alt></p><h4 id="安装Python（Mac系统）"><a href="#安装Python（Mac系统）" class="headerlink" title="安装Python（Mac系统）"></a>安装Python（Mac系统）</h4><p>因为系统中有一些内容是基于Python来运行，Mac系统是自带Python环境的。</p><p>但是这个Python环境版本为2.x的Python，想要直接使用Python2.x版本的Python，则不需要安装。</p><p>Mac系统中的Python安装就相对简单很多，只需要我们下载好安装包，安装就好。</p><p>他有很多内容并不需要我们来勾选。</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/10.png" alt></p><h3 id="多Python版本兼容"><a href="#多Python版本兼容" class="headerlink" title="多Python版本兼容"></a>多Python版本兼容</h3><h4 id="windows系统"><a href="#windows系统" class="headerlink" title="windows系统"></a>windows系统</h4><p>在一些情况下，我们的电脑需要安装两个版本的Python，那么就会有一个兼容的问题。</p><p>官方给我们提供了一个小工具:py.exe </p><p>py.exe存在于python3.X以上的版本，存在目录:C:\Windows</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/11.png" alt></p><p><strong>py.exe的使用:</strong></p><p><strong>Python启动:</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2.X: py -2 </span><br><span class="line">python3.X: py -3</span><br></pre></td></tr></table></figure><p><strong>Pip的启动:</strong></p><p>Pip的使用与正常pip使用一致，只是把命令pip替换成带有 目标版本的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2.X: py -2 –m pip </span><br><span class="line">python3.X: py -3 –m pip</span><br></pre></td></tr></table></figure><p><strong>Python启动声明python版本:</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2.X: #!python2 </span><br><span class="line">python3.X: #!python3</span><br></pre></td></tr></table></figure><p><img src="//angeszhu.github.io/2019/05/31/install-python/12.png" alt></p><h4 id="mac系统"><a href="#mac系统" class="headerlink" title="mac系统"></a>mac系统</h4><p>在mac中使用python，在命令上加上3即可。</p><p>Windows中的py.exe并不存在。 </p><p>相较windows来说，要简单很多，具体使用如下图：</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/13.png" alt></p><h3 id="Pycharm安装"><a href="#Pycharm安装" class="headerlink" title="Pycharm安装"></a>Pycharm安装</h3><h4 id="下载以及安装"><a href="#下载以及安装" class="headerlink" title="下载以及安装"></a>下载以及安装</h4><p>首先我们需要去官网选择我们想要下载的Python版本。</p><blockquote><p>社区版：功能简单，可以满足日常练习以及写脚本的需求，但在项目级开发时，略显不足。</p></blockquote><blockquote><p>专业版：功能全面，可以满足所有的Python开发使用。</p></blockquote><p>社区版免费，专业版需要激活或者购买。</p><p><a href="https://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="noopener">Pycharm官网下载地址点击跳转</a></p><p>Windows下安装Pycharm，需注意安装路径不要有中文。 </p><p>Mac下直接把Pycharm安装到应用程序即可。</p><h4 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h4><ul><li>服务器激活 </li></ul><p><em>在license server中输入地址:<a href="http://xidea.online" target="_blank" rel="noopener">http://xidea.online</a> 地址不唯一，随意百度有很多可以使用的。</em></p><p><img src="//angeszhu.github.io/2019/05/31/install-python/14.png" alt></p><ul><li><p>修改时间方式(新版本不可用) </p><ol><li>Pycharm注册界面不动 </li><li>调整电脑系统时间2038年(时间随意) </li><li>注册界面选择申请30天试用</li><li>退出pycharm</li><li>电脑时间调整回正常时间</li></ol></li><li><p>淘宝购买全家桶账号激活 </p></li></ul><p><em>缺点:激活一次管一年，到期后要找客服免费续期</em></p><ul><li>网上下载jar包，修改配置激活</li></ul><p><em>但是要注意jar包与Pycharm版本的对应关系，并不是所有的版本都可以用一个jar包激活。</em></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术栈（简单整理）</title>
      <link href="/2019/05/31/Knowledge-system/"/>
      <url>/2019/05/31/Knowledge-system/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 日常需要 </category>
          
          <category> 寻找目标 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识体系 学习方向 职业规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown使用手册（持续更新）</title>
      <link href="/2019/05/29/Markdown-text/"/>
      <url>/2019/05/29/Markdown-text/</url>
      
        <content type="html"><![CDATA[<h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><blockquote><p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p></blockquote><a id="more"></a><h3 id="它的优缺点"><a href="#它的优缺点" class="headerlink" title="它的优缺点"></a>它的优缺点</h3><p>优点：</p><blockquote><p>1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br>2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可</p></blockquote><p>缺点：</p><blockquote><p>1、需要记一些语法（当然，是很简单。五分钟学会）。<br>2、有些平台不支持Markdown编辑模式。</p></blockquote><hr><h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h2><hr><h4 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h4><p>在想要设置为标题的文字前面加符号#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。<br>注：标准语法一般在#后跟个空格再写文字。<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="//angeszhu.github.io/2019/05/29/Markdown-text/title.png" alt="标题效果"></p><hr><h4 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h4><ul><li>加粗</li></ul><p>要加粗的文字左右分别用两个’*’号包起来</p><ul><li>斜体</li></ul><p>要倾斜的文字左右分别用一个’*’号包起来</p><ul><li>斜体加粗</li></ul><p>要倾斜和加粗的文字左右分别用三个’*’号包起来</p><ul><li>删除线</li></ul><p>要加删除线的文字左右分别用两个’~~’号包起来</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h4 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h4><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h4 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h4><p>三个或者三个以上的 - 或者 * 都可以。<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>效果如下：</p><hr><hr><hr><hr><h4 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h4><p>语法：<br>![图片alt](图片地址 ‘’图片title’’)</p><p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](https://www.baidu.com/link?url=Oshs7TTIS7ATkTi_mTNlFyP2mBI3Jpg9oRrO2kY9c7HsH1fxPGuV36DcNatRqI00WOvZVk9jqhCJugunwZd0szzwyJSL48TZqxexmJx_FxXn5vHaZ4R1XIFzXym_uWsh54i7241XpLSXkWYV71RZR-RRLeSiq-fOcSd-NPaY2jYqyIDN-tH_lvb_zX83bEJ2ciaV5f_HAF8xoEB3O6eWWvvB_iNnlYEEW4EBaaX73tOvcm-c4Iu_6A4LCncOSdADHdDOAYZbyP6dPTZaGbKjGdmZkxeTzN3Ln8EagEz7elDJCPlAlT3Xx3fr9v2TOVh9T_XonNm8XJ_jTtimSGNvh72wKSimrhns9kM-bio8Y6G_sPOcE91lAJfUyqmWOFQ4HNDo0U5uF-LXzL6qazjHZdAL4422LCf3OoQW8FywGDHmrL7pIoXKn3wGcIEjgf3IV-ZrfIDmq2UsfB7oxpENGMtQiGtjTqdJ5PFNxCxFMe-HykBsCjkl33t2raHgYco_QOId237Qzw7KTpmpDu5cm-uIYTrm9j0jjnjiwcJJyT-kk0xcySjOwk4FT2xBxo0I8h3rwhYUJkxXtDi1YHUyI5rvFo9UBxVnqLBV8mx0CcjRnxeDWWxpOKrfJSGz9aPERRR0ApPP1A3PlL8zKMLmE_&amp;timg=&amp;click_t=1559285904085&amp;s_info=1425_789&amp;wd=&amp;eqid=adaa6738000d4b05000000045cf0d08c &quot;小猫咪&quot;)</span><br></pre></td></tr></table></figure><p>由于Hexo对网络图片不太友好，大家就自己试效果吧。</p><p>上传本地图片直接点击导航栏的图片标志，选择图片即可</p><h4 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br></pre></td></tr></table></figure><p>title可加可不加</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[简书](http://jianshu.com)</span><br><span class="line">[百度](http://baidu.com)</span><br></pre></td></tr></table></figure><p>效果如下：<br><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a><br>注：Markdown本身语法不支持链接在新页面中打开。</p><h4 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h4><ul><li>无序列表</li></ul><p>语法：<br>无序列表用 - + * 任何一种都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br></pre></td></tr></table></figure><p>注意：- + * 跟内容之间都要有一个空格</p><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li><p>列表内容</p></li><li><p>有序列表</p></li></ul><p>语法：<br>数字加点<br>1.列表内容<br>2.列表内容<br>3.列表内容</p><p>注意：序号跟内容之间要有空格</p><p>效果如下：<br>1.列表内容<br>2.列表内容<br>3.列表内容</p><ul><li>列表嵌套</li></ul><p>上一级和下一级之间敲三个空格即可</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">* 一级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line"></span><br><span class="line">* 一级无序列表内容</span><br><span class="line">   1.二级有序列表内容</span><br><span class="line">   2.二级有序列表内容</span><br><span class="line">   3.二级有序列表内容</span><br><span class="line"></span><br><span class="line">1.一级有序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line"></span><br><span class="line">2.一级有序列表内容</span><br><span class="line">   1.二级有序列表内容</span><br><span class="line">   2.二级有序列表内容</span><br><span class="line">   3.二级有序列表内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li><p>一级无序列表内容</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li><p>一级无序列表内容<br> 1.二级有序列表内容<br> 2.二级有序列表内容<br> 3.二级有序列表内容</p></li></ul><p>1.一级有序列表内容</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul><p>2.一级有序列表内容<br>   1.二级有序列表内容<br>   2.二级有序列表内容<br>   3.二级有序列表内容</p><h4 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr></tbody></table><h4 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h4><p>语法：<br>单行代码：代码之间分别用一个反引号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`代码内容`</span><br></pre></td></tr></table></figure><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(```)</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p><p>示例：<br>单行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`create database hero;`</span><br></pre></td></tr></table></figure><p>代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(```)</span><br><span class="line">    function fun()&#123;</span><br><span class="line">         echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure><p>效果如下：<br>单行代码<br><code>create database hero;</code><br>代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">     echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure><h4 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h4><div id="flowchart-0" class="flow-chart"></div><ul><li><p>一个纯文本的语法怎么画图？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将流程图代码包含在```folw和```之间即可</span><br></pre></td></tr></table></figure></li><li><p>流程图代码分两块，上面一块是创建你的流程（创建元素），然后隔一行，创建流程的走向(连接元素)</p></li><li><p>创建流程（元素）：tag=&gt;type: content:&gt;url</p><ul><li>tag 是流程图中的标签，在第二段连接元素时会用到。名称可以任意，一般为流程的英文缩写和数字的组合。</li><li>type 用来确定标签的类型，=&gt;后面表示类型。由于标签的名称可以任意指定，所以要依赖type来确定标签的类型</li><li>标签有6种类型：start end operation subroutine condition inputoutput</li><li>content 是流程图文本框中的描述内容，: 后面表示内容，中英文均可。特别注意，冒号与文本之间一定要有个空格</li><li>url是一个连接，与框框中的文本相绑定，:&gt;后面就是对应的 url 链接，点击文本时可以通过链接跳转到 url 指定页面</li></ul></li><li><p>指向流程(连接元素)：标识（类别）-&gt;下一个标识</p><ul><li>使用 -&gt; 来连接两个元素</li><li>对于condition类型，有yes和no两个分支，如示例中的cond(yes)和cond(no)</li><li>每个元素可以制定分支走向，默认向下，也可以用right指向右边，如示例中cond2(yes,right)。</li></ul></li></ul><p>流程图元素</p><ul><li>开始<br>st=&gt;start: 开始</li><li>操作<br>op1=&gt;operation: 操作、执行说明</li><li>条件<br>cond=&gt;condition: 确认？</li><li>子程序<br>sub1=&gt;subroutine: 子程序操作说明</li><li>用户输入或输出<br>io1=&gt;inputoutput: 输入密码</li><li>结束<br>e=&gt;end: 结束</li></ul><h4 id="十一-整一个To-Do-List"><a href="#十一-整一个To-Do-List" class="headerlink" title="十一 整一个To Do List"></a>十一 整一个To Do List</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [x] 学习python基础 【减号+[+空格或x+]+空格】</span><br><span class="line">- [ ] 学习python网络编程</span><br></pre></td></tr></table></figure><ul><li><input checked disabled type="checkbox"> 学习python基础 【减号+[+空格或x+]+空格】</li><li><input disabled type="checkbox"> 学习python网络编程</li></ul><blockquote><p>参考资料：<a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">https://www.jianshu.com/p/191d1e21f7ed</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始 e=>end: 登录 io1=>inputoutput: 输入用户名密码 sub1=>subroutine: 数据库查询子类 cond=>condition: 是否有此用户 cond2=>condition: 密码是否正确 op=>operation: 读入用户信息st->io1->sub1->cond cond(yes,right)->cond2 cond(no)->io1(right) cond2(yes,right)->op->e cond2(no)->io1</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常需要 </category>
          
          <category> 文档编写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 文档编写 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
