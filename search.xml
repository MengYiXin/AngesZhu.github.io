<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则表达式</title>
      <link href="/2019/06/03/regular-base/"/>
      <url>/2019/06/03/regular-base/</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式?"></a>什么是正则表达式?</h3><blockquote><p>正则表达式，又称规则表达式。(英语:Regular Expression，在代码中常简写为regex、regexp或RE)， 计算机科学的一个概念。正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。</p></blockquote><blockquote><p>正则表达式是对字符串(包括普通字符(例如，a 到 z 之间的字母)和特殊字符(称为“元字符”))操作的 一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这 个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式是一种文本模式，模式描述在搜索文本时要 匹配的一个或多个字符串。</p></blockquote><h4 id="使用目的"><a href="#使用目的" class="headerlink" title="使用目的"></a>使用目的</h4><p>给定一个正则表达式和另一个字符串，我们可以达到如下的目的:</p><ol><li><p>给定的字符串是否符合正则表达式的过滤逻辑(称作“匹配”): </p></li><li><p>可以通过正则表达式，从字符串中获取我们想要的特定部分。</p></li></ol><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>正则表达式的特点是:</p><ol><li><p>灵活性、逻辑性和功能性非常强;</p></li><li><p>可以迅速地用极简单的方式达到字符串的复杂控制。 </p></li><li><p>对于刚接触的人来说，比较晦涩难懂。</p></li></ol><p>由于正则表达式主要应用对象是文本，因此它在各种文本编辑器场合都有应用，小到著名编辑器EditPlus， 大到Microsoft Word、Visual Studio等大型编辑器，都可以使用正则表达式来处理文本内容。</p><h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><p>正则表达式由一些普通字符和一些元字符(metacharacters)组成。普通字符包括大小写的字母和数字，而 元字符则具有特殊的含义，我们下面会给予解释。</p><p>在最简单的情况下，一个正则表达式看上去就是一个普通的查找串。例如，正则表达式”testing”中没有包含 任何元字符，它可以匹配”testing”和”testing123”等字符串，但是不能匹配”Testing”。</p><p>要想真正的用好正则表达式，正确的理解元字符是最重要的事情。下表列出了所有的元字符和对它们的一个简短的描述。</p><h4 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h4><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数<br>字、所有标点符号和一些其他符号。</p><h4 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h4><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列:</p><table><thead><tr><th>字 符</th><th align="center">描述</th></tr></thead><tbody><tr><td>\cx</td><td align="center">匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td>\f</td><td align="center">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td>\n</td><td align="center">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td>\r</td><td align="center">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td>\s</td><td align="center">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则 表达式会匹配全角空格符。</td></tr><tr><td>\S</td><td align="center">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td>\t</td><td align="center">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td>\v</td><td align="center">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr></tbody></table><h4 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h4><p>所谓特殊字符，就是一些有特殊含义的字符，如 runoo<em>b 中的 <em>，简单的说就是表示任何字符串 的意思。如果要查找字符串中的 * 符号，则需要对 * 进行转义，即在其前加一个 *</em>: runo</em>ob*runoob。</p><p>许多元字符要求在试图匹配它们时特别对待。</p><p>若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜 杠字符** 放在它们前面。</p><p>下表列出了正则表达式中的特殊字符:</p><p><img src="//angeszhu.github.io/2019/06/03/regular-base/1.png" alt></p><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或<br>{n,m} 共6种。 </p><p>正则表达式的限定符有:</p><table><thead><tr><th>字 符</th><th align="center">描述</th></tr></thead><tbody><tr><td>*</td><td align="center">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td>+</td><td align="center">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等 价于 {1,}。</td></tr><tr><td>?</td><td align="center">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td></tr><tr><td>{n}</td><td align="center">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td>{n,}</td><td align="center">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td>{n,m}</td><td align="center">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><p>*、+限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪 或最小匹配。</p><p>例如，您可能搜索 HTML 文档，以查找括在 H1 标记内的章节标题。该文本在您的文档中如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;H1&gt;Chapter 1 - 介绍正则表达式&lt;/H1&gt;</span><br></pre></td></tr></table></figure><p>贪婪:下面的表达式匹配从开始小于符号 (&lt;) 到关闭 H1 标记的大于符号 (&gt;) 之间的所有内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/&lt;.*&gt;/</span><br></pre></td></tr></table></figure><p>非贪婪:如果您只需要匹配开始和结束 H1 标签，下面的非贪婪表达式只匹配 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/&lt;.*?&gt;/</span><br></pre></td></tr></table></figure><h4 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h4><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式</p><p>出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>定位符用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\b 描述单词的前或后边界，\B 表示非单词边界。</p><p>正则表达式的定位符有:</p><table><thead><tr><th>字 符</th><th align="center">描述</th></tr></thead><tbody><tr><td>^</td><td align="center">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之 后的位置匹配。</td></tr><tr><td>$</td><td align="center">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之 前的位置匹配。</td></tr><tr><td>\b</td><td align="center">匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td>\B</td><td align="center">非单词边界匹配。</td></tr></tbody></table><p> <strong>注意</strong>:不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置， 因此不允许诸如 ^* 之类的表达式。</p><p>若要匹配一行文本开始处的文本，请在正则表达式的开始使用 ^ 字符。不要将 ^ 的这种用法与中括号表达式 内的用法混淆。</p><p>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 $ 字符。 </p><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。</p><p>但用圆括号会有一个副作用，使相关的匹配会 被缓存，此时可用?:放在第一个选项前来消除这种副作用。</p><p>其中 ?: 是非捕获元之一，还有两个非捕获元是 ?= 和 ?!，这两个还有更多的含义，前者为正向预查，</p><p>在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p><h4 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h4><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，</p><p>所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。</p><p>缓冲区编号从 1 开始，最多可存储 99 个捕获 的子表达式。</p><p>每个缓冲区都可以使用 \n 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p><p>可以使用非捕获元字符 ?:、?= 或 ?! 来重写捕获，忽略对相关匹配的保存。 </p><h3 id="符号完整列表"><a href="#符号完整列表" class="headerlink" title="符号完整列表"></a><strong>符号完整列表</strong></h3><table><thead><tr><th>字 符</th><th align="center">描述</th></tr></thead><tbody><tr><td><code>\</code></td><td align="center">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制 转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘&#39; 匹配 “” 而 “(“ 则匹配 “ (“。</td></tr><tr><td>^</td><td align="center">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td>$</td><td align="center">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td>*</td><td align="center">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td>+</td><td align="center">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td>?</td><td align="center">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td>{n}</td><td align="center">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹 配 “food” 中的两个 o。</td></tr><tr><td>{n,}</td><td align="center">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td>{n,m}</td><td align="center">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不 能有空格。</td></tr><tr><td>?</td><td align="center">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪 婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹 配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所 有 ‘o’。</td></tr><tr><td>.</td><td align="center">匹配除换行符(\n、\r)之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使 用像”(.</td></tr><tr><td>(pattern)</td><td align="center">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在 VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字 符，请使用 ‘(‘ 或 ‘)’。</td></tr><tr><td>(?:pattern)</td><td align="center">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使 用。这在使用 “或” 字符 (</td></tr><tr><td>(? =pattern)</td><td align="center">正向肯定预查(look ahead positive assert)，在任何匹配pattern的字符串开始处匹配 查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例 如，”Windows(?=95</td></tr><tr><td>(?!pattern)</td><td align="center">正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符 串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例 如”Windows(?!95</td></tr><tr><td>(? &lt;=pattern)</td><td align="center">反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”(?&lt;=95</td></tr><tr><td>(? &lt;!pattern)</td><td align="center">反向预定预查，与正向否定预查类似，只是方向相反。例如”(?&lt;!95</td></tr><tr><td>`x</td><td align="center">y`</td></tr><tr><td>[xyz]</td><td align="center">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td>[^xyz]</td><td align="center">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中 的’p’、’l’、’i’、’n’。</td></tr><tr><td>[a-z]</td><td align="center">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小 写字母字符。</td></tr><tr><td>[^a-z]</td><td align="center">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td>\b</td><td align="center">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td>\B</td><td align="center">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td>\cx</td><td align="center">匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A- Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td>\d</td><td align="center">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td>\D</td><td align="center">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td>\f</td><td align="center">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td>\n</td><td align="center">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td>\r</td><td align="center">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td>\s</td><td align="center">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td>\S</td><td align="center">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td>\t</td><td align="center">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td>\v</td><td align="center">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td>\w</td><td align="center">匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td>\W</td><td align="center">匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td>\xn</td><td align="center">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例 如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编 码。</td></tr><tr><td>\num</td><td align="center">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连 续的相同字符。</td></tr><tr><td>\n</td><td align="center">标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td>\nm</td><td align="center">标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引 用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制 转义值 nm。</td></tr><tr><td>\nml</td><td align="center">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td>\un</td><td align="center">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配 版权符号 (?)。</td></tr></tbody></table><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。</p><p>相同优先级的从左到右进行运算，不同优先级的运算先高后低。</p><p>下表从最高到最低说明了各种正则表达式运算符的优先级顺序:</p><table><thead><tr><th>运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td><code>\</code></td><td align="center">转义符</td></tr><tr><td>(), (?:), (?=), []</td><td align="center">圆括号和方括号</td></tr><tr><td>*, +, ?, {n}, {n,}, {n,m}</td><td align="center">限定符</td></tr><tr><td>^, $, \任何元字符、任何字符</td><td align="center">定位点和序列(即:位置和顺序)</td></tr><tr><td></td><td align="center"></td></tr></tbody></table><h3 id="常用实例"><a href="#常用实例" class="headerlink" title="常用实例"></a>常用实例</h3><p>定位点和序列(即:位置和顺序)</p><table><thead><tr><th>正则表达式</th><th align="center">描述</th></tr></thead><tbody><tr><td>/\b([a-z]+) \1\b/gi</td><td align="center">一个单词连续出现的位置。</td></tr><tr><td>/(\w+)://([^/:]+)(:\d)? ([^# ])/</td><td align="center">将一个URL解析为协议、域、端口及相对路径。</td></tr><tr><td>/^(?:Chapter</td><td align="center">Section) [1-9][0-9]{0,1}$/</td></tr><tr><td>/[-a-z]/</td><td align="center">a至z共26个字母再加一个-号。</td></tr><tr><td>/ter\b/</td><td align="center">可匹配chapter，而不能匹配terminal。</td></tr><tr><td>/\Bapt/</td><td align="center">可匹配chapter，而不能匹配aptitude。</td></tr><tr><td>/Windows(?=95</td><td align="center">98</td></tr><tr><td>/^\s*$/</td><td align="center">匹配空行。</td></tr><tr><td>/\d{2}-\d{5}/</td><td align="center">验证由两位数字、一个连字符再加 5 位数字组成的 ID 号。</td></tr><tr><td>/&lt;\s(\S+)(\s[^&gt;])?&gt;[\s\S] &lt;\s/\1\s*&gt;/</td><td align="center">匹配 HTML 标记。</td></tr></tbody></table><p>1.验证用户名和密码:(“^[a-zA-Z]\w{5,15}$”)正确格式:”[A-Z][a-z]_[0-9]”组成,并且第一个字必须为字母 6~16位;</p><p>2.验证电话号码:(“^(\d{3,4}-)\d{7,8}$”)正确格式:xxx/xxxx-xxxxxxx/xxxxxxxx;</p><p>3.验证手机号码:”^1[3|4|5|7|8][0-9]{9}$”; </p><p>4.验证身份证号(15位):”\d{14}[[0-9],0-9xX]”，(18位):”\d{17}(\d|X|x)”; </p><p>5.验证Email地址:(“^\w+([-+.]\w+)@\w+([-.]\w+).\w+([-.]\w+)*$”); </p><p>6.只能输入由数字和26个英文字母组成的字符串:(“^[A-Za-z0-9]+$”); </p><p>7.整数或者小数:^[0-9]+([.][0-9]+){0,1}$</p><p>8.只能输入数字:”^[0-9]*$”。</p><p>9.只能输入n位的数字:”^\d{n}$”。</p><p>10.只能输入至少n位的数字:”^\d{n,}$”。</p><p>11.只能输入m~n位的数字:”^\d{m,n}$”。</p><p>12.只能输入零和非零开头的数字:”^(0|[1-9][0-9]*)$”。</p><p>13.只能输入有两位小数的正实数:”^[0-9]+(.[0-9]{2})?$”。</p><p>14.只能输入有1~3位小数的正实数:”^[0-9]+(.[0-9]{1,3})?$”。</p><p>15.只能输入非零的正整数:”^+?[1-9][0-9]*$”。</p><p>16.只能输入非零的负整数:”^-[1-9][0-9]*$”。</p><p>17.只能输入长度为3的字符:”^.{3}$”。</p><p>18.只能输入由26个英文字母组成的字符串:”^[A-Za-z]+$”。</p><p>19.只能输入由26个大写英文字母组成的字符串:”^[A-Z]+$”。</p><p>20.只能输入由26个小写英文字母组成的字符串:”^[a-z]+$”。</p><p>21.验证是否含有^%&amp;’,;=?$”等字符:”[%&amp;’,;=?$^]+”。</p><p>22.只能输入汉字:”^[\u4e00-\u9fa5]{0,}$”。</p><p>23.验证URL:”^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$”。</p><p>24.验证一年的12个月:”^(0?[1-9]|1[0-2])$”正确格式为:”01”<del>“09”和”10”</del>“12”。</p><p>25.验证一个月的31天:”^((0?[1-9])|((1|2)[0-9])|30|31)$”正确格式 为;”01”<del>“09”、”10”</del>“29”和“30”~“31”。</p><p>26.获取日期正则表达式:\d{4}[年|-|.]\d{\1-\12}[月|-|.]\d{\1-\31}日? 评注:可用来匹配大多数年月日信息。 </p><p>27.匹配双字节字符(包括汉字在内):[^\x00-\xff] 评注:可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1) </p><p>28.匹配空白行的正则表达式:\n\s*\r  评注:可以用来删除空白行</p><p>29.匹配HTML标记的正则表达式:&lt;(\S?)[^&gt;]&gt;.?&lt;/&gt;|&lt;.? /&gt; 评注:网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力 </p><p>30.匹配首尾空白字符的正则表达式:^\s|\s$ 评注:可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式 </p><p>31.匹配网址URL的正则表达式:[a-zA-z]+://[^\s]* 评注:网上流传的版本功能很有限，上面这个基本可以满足需求 </p><p>32.匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线):^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 评注:表单验证时很实用</p><p>33.匹配腾讯QQ号:[1-9][0-9]{4,} 评注:腾讯QQ号从10 000 开始</p><p>34.匹配中国邮政编码:[1-9]\d{5}(?!\d) 评注:中国邮政编码为6位数字</p><p>35.匹配ip地址:([1-9]{1,3}.){3}[1-9]。 评注:提取ip地址时有用</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由（Urls）</title>
      <link href="/2019/06/03/django-urls/"/>
      <url>/2019/06/03/django-urls/</url>
      
        <content type="html"><![CDATA[<h1 id="路由（URLS）"><a href="#路由（URLS）" class="headerlink" title="路由（URLS）"></a>路由（URLS）</h1><h2 id="什么是URL？"><a href="#什么是URL？" class="headerlink" title="什么是URL？"></a>什么是URL？</h2><blockquote><p>​    URL（Uniform Resource Locator，统一资源定位符）是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL，用于指出文件的路径位置。也就可以理解为，URL就是常说的网址，每一个地址代表了不同的网页，在Django中，URL也成为URLconf。</p></blockquote><h2 id="初始项目的urls"><a href="#初始项目的urls" class="headerlink" title="初始项目的urls"></a>初始项目的urls</h2><p><img src="//angeszhu.github.io/2019/06/03/django-urls/1.png" alt></p><p>这是一个纯净项目的url配置文件，他存在的目录，是与setting文件在同一个目录中。</p><p>urlpatterns，就是一个保存url配置的变量，他的类型是list。</p><p>创建项目之后，这个文件中有一些例子了。</p><p>但是他在注释中也给了我们一些其他的用法。</p><p>第一种，就是他例子中的直接相对地址加上视图函数的名称。</p><p>第二种，则是导入urls文件，这样也给了我们其他更方便的配置方法，不必把所有的内容写到一个文件下。</p><p>我们可以通过include的方式把在其他位置写好的url配置文件导入进去。</p><p>同时，路径的匹配，还支持正则表达式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 导入Admin功能模块</span><br><span class="line">from django.contrib import admin</span><br><span class="line"># 导入URL编写模块</span><br><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line"># urlpatterns 整个项目的url集合，每一个元素代表一条url信息</span><br><span class="line">urlpatterns = [</span><br><span class="line"># 设定admin的url</span><br><span class="line">    path(&apos;admin/&apos;, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>‘admin/‘ 代表的是127.0.0.1:8000/admin的地址，后面的斜杠是路径分隔符。</p><p>admin.site.urls是url的处理函数，即视图函数</p><h2 id="URLconfs中的方法"><a href="#URLconfs中的方法" class="headerlink" title="URLconfs中的方法"></a>URLconfs中的方法</h2><h3 id="1-path"><a href="#1-path" class="headerlink" title="1.path()"></a>1.path()</h3><p>path<strong>(*</strong>route<strong>*,</strong> <em>view**</em>,** <em>kwargs=None**</em>,** <em>name=None**</em>)**</p><p>返回包含在中的元素<code>urlpatterns</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;index/&apos;, views.index, name=&apos;main-view&apos;),</span><br><span class="line">    path(&apos;bio/&lt;username&gt;/&apos;, views.bio, name=&apos;bio&apos;),</span><br><span class="line">    path(&apos;articles/&lt;slug:title&gt;/&apos;, views.article, name=&apos;article-detail&apos;),</span><br><span class="line">    path(&apos;articles/&lt;slug:title&gt;/&lt;int:section&gt;/&apos;, views.section, name=&apos;article-section&apos;),</span><br><span class="line">    path(&apos;weblog/&apos;, include(&apos;blog.urls&apos;)),</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>route</strong>参数应该是一个字符串或 gettext_lazy()，其中包含一个URL模式。该字符串可能包含尖括号（<code>&lt;username&gt;</code>如上所示）以捕获URL的一部分并将其作为关键字参数发送到视图。尖括号可以包括转换器规范（如<code>int</code>部分<code>&lt;int:section&gt;</code>），其限制匹配的字符并且还可以改变传递给视图的变量的类型。例如，<code>&lt;int:section&gt;</code>匹配一串十进制数字并将值转换为a <code>int</code>。</p><p><code>view</code>参数是一个视图函数或的结果 as_view()为基于类的视图。它也可以是一个django.urls.include()。</p><p>该<code>kwargs</code>参数允许您将其他参数传递给视图函数或方法。</p><p>有关 name参数的内容，见url命名空间。</p><h3 id="2-re-path"><a href="#2-re-path" class="headerlink" title="2.re_path()"></a>2.re_path()</h3><p><code>re_path</code><strong>(*</strong>route<strong>*,</strong> <em>view**</em>,** <em>kwargs=None**</em>,** <em>name=None**</em>)**</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import include, re_path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(r&apos;^index/$&apos;, views.index, name=&apos;index&apos;),</span><br><span class="line">    re_path(r&apos;^bio/(?P&lt;username&gt;\w+)/$&apos;, views.bio, name=&apos;bio&apos;),</span><br><span class="line">    re_path(r&apos;^weblog/&apos;, include(&apos;blog.urls&apos;)),</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>该<code>route</code>参数应该是一个字符串或 gettext_lazy()，其中包含与Python的兼容的正则表达式 re模块。字符串通常使用原始字符串语法（<code>r&#39;&#39;</code>），以便它们可以包含序列，<code>\d</code>而无需使用另一个反斜杠转义反斜杠。进行匹配时，将正则表达式中捕获的组传递给视图 - 如果组已命名，则作为命名参数，否则作为位置参数。值以字符串形式传递，不进行任何类型转换。</p><p>的<code>view</code>，<code>kwargs</code>和<code>name</code>参数是一样的 path()</p><h3 id="3-include"><a href="#3-include" class="headerlink" title="3.include()"></a>3.include()</h3><p><code>include</code>（<em>module</em>，<em>namespace = None</em>）</p><p><code>include</code>（<em>pattern_list</em>）</p><p><code>include</code>（<em>（pattern_list</em>，<em>app_namespace）</em>，<em>namespace = None</em>）</p><p>一个函数，它将完整的Python导入路径带到另一个URLconf模块，该模块应该“包含”在这个地方。可选地，还可以指定将包括条目的应用程序命名空间和实例命名空间。</p><p>通常，应用程序命名空间应由包含的模块指定。如果设置了应用程序命名空间，则该<code>namespace</code>参数可用于设置不同的实例命名空间。</p><p><code>include()</code> 也接受返回URL模式的iterable或包含此类iterable的2元组以及应用程序命名空间的名称作为参数。</p><p>More Actions参数：</p><ul><li><strong>module</strong> - URLconf模块（或模块名称）</li><li><strong>namespace</strong>（<a href="https://docs.python.org/3/library/stdtypes.html#str" target="_blank" rel="noopener"><em>str</em></a>） - 包含的URL条目的实例名称空间</li><li><strong>pattern_list</strong> - Iterable <a href="https://docs.djangoproject.com/en/2.0/ref/urls/#django.urls.path" target="_blank" rel="noopener"><code>path()</code></a>和/或<a href="https://docs.djangoproject.com/en/2.0/ref/urls/#django.urls.re_path" target="_blank" rel="noopener"><code>re_path()</code></a>实例。</li><li><strong>app_namespace</strong>（<a href="https://docs.python.org/3/library/stdtypes.html#str" target="_blank" rel="noopener"><em>str</em></a>） - 包含的URL条目的应用程序命名空间</li></ul><h3 id="4-register-converter"><a href="#4-register-converter" class="headerlink" title="4.register_converter()"></a>4.<code>register_converter()</code></h3><p><code>register_converter</code>（<em>converter</em>，<em>type_name</em>）</p><p>注册转换器以在s中使用的功能。path  route</p><p>该<code>converter</code>参数是一个转换器类，并且<code>type_name</code>是在路径模式来使用转换器的名称。</p><h2 id="URLconfs中使用的函数"><a href="#URLconfs中使用的函数" class="headerlink" title="URLconfs中使用的函数"></a>URLconfs中使用的函数</h2><h3 id="static"><a href="#static" class="headerlink" title="static()"></a>static()</h3><ul><li><code>static.``static</code>（<em>前缀</em>，<em>视图= django.views.static.serve</em>，<em>** kwargs</em>)</li></ul><p>Helper函数在调试模式下返回服务文件的URL模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf import settings</span><br><span class="line">from django.conf.urls.static import static</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    # ... the rest of your URLconf goes here ...</span><br><span class="line">] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure><h1 id="URL调度程序"><a href="#URL调度程序" class="headerlink" title="URL调度程序"></a>URL调度程序</h1><p>干净，优雅的URL方案是高质量Web应用程序中的重要细节。Django允许您根据需要设计URL，没有框架限制。</p><p>没有<code>.php</code>或没有<code>.cgi</code>必要，当然也没有 <code>0,2097,1-1-1928,00</code>废话。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>要设计应用程序的URL，可以创建一个非正式的称为<strong>URLconf</strong>（URL配置）的Python模块 。此模块是纯Python代码，是URL路径表达式与Python函数（您的视图）之间的映射。</p><p>该映射可以根据需要缩短或缩短。它可以引用其他映射。而且，因为它是纯Python代码，所以它可以动态构建。</p><p>Django还提供了一种根据活动语言翻译URL的方法，详细的可以看官方文档。</p><h2 id="Django如何处理请求"><a href="#Django如何处理请求" class="headerlink" title="Django如何处理请求"></a>Django如何处理请求</h2><p>当用户从Django支持的站点请求页面时，这是系统遵循的算法，以确定要执行的Python代码：</p><ol><li><p>Django确定要使用的根URLconf模块。通常，这是<code>ROOT_URLCONF</code>设置的值，但如果传入 <code>HttpRequest</code>对象具有<code>urlconf</code>属性（由中间件设置），则将使用其值代替 <code>ROOT_URLCONF</code>设置。</p></li><li><p>Django加载Python模块并查找变量 <code>urlpatterns</code>。这应该是Python列表<code>django.urls.path()</code> 和/或<code>django.urls.re_path()</code>实例。</p></li><li><p>Django按顺序遍历每个URL模式，并在匹配请求的URL的第一个模式停止。</p></li><li><p>一旦其中一个URL模式匹配，Django就会导入并调用给定的视图，这是一个简单的Python函数（或基于</p><p>类的视图</p><p>）。视图传递以下参数：</p><ul><li>一个例子<code>HttpRequest</code>。</li><li>如果匹配的URL模式未返回任何命名组，则正则表达式中的匹配将作为位置参数提供。</li><li>关键字参数由路径表达式匹配的任何命名部分组成，由或者 可选<code>kwargs</code>参数中指定的任何参数覆盖 。<code>django.urls.path()``django.urls.re_path()</code></li></ul></li><li><p>如果没有URL模式匹配，或者在此过程中的任何点期间引发异常，Django将调用适当的错误处理视图。请参阅下面的错误处理。</p></li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>这是一个示例URLconf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;articles/2003/&apos;, views.special_case_2003),</span><br><span class="line">    path(&apos;articles/&lt;int:year&gt;/&apos;, views.year_archive),</span><br><span class="line">    path(&apos;articles/&lt;int:year&gt;/&lt;int:month&gt;/&apos;, views.month_archive),</span><br><span class="line">    path(&apos;articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug:slug&gt;/&apos;, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>笔记：</p><ul><li>要从URL捕获值，请使用尖括号。</li><li>捕获的值可以选择包括转换器类型。例如，用于 <code>&lt;int:name&gt;</code>捕获整数参数。如果未包含转换器<code>/</code>，则匹配除字符之外的任何字符串。</li><li>没有必要添加前导斜杠，因为每个URL都有。例如，它<code>articles</code>不是<code>/articles</code>。</li></ul><p>示例请求：</p><ul><li>请求<code>/articles/2005/03/</code>与列表中的第三个条目匹配。Django会调用该函数 。<code>views.month_archive(request, year=2005,month=3)</code></li><li><code>/articles/2003/</code>将匹配列表中的第一个模式，而不是第二个模式，因为模式是按顺序测试的，第一个是第一个要通过的测试。随意利用订单插入这样的特殊情况。在这里，Django会调用该函数 <code>views.special_case_2003(request)</code></li><li><code>/articles/2003</code> 不匹配任何这些模式，因为每个模式都要求URL以斜杠结尾。</li><li><code>/articles/2003/03/building-a-django-site/</code>将匹配最终模式。Django会调用该函数 。<code>views.article_detail(request,year=2003, month=3, slug=&quot;building-a-django-site&quot;)</code></li></ul><h2 id="路径转换器"><a href="#路径转换器" class="headerlink" title="路径转换器"></a>路径转换器</h2><p>默认情况下，以下路径转换器可用：</p><ul><li><code>str</code>- 匹配除路径分隔符之外的任何非空字符串<code>&#39;/&#39;</code>。如果转换器未包含在表达式中，则这是默认值。</li><li><code>int</code> - 匹配零或任何正整数。返回一个int。</li><li><code>slug</code> - 匹配由ASCII字母或数字组成的任何slug字符串，以及连字符和下划线字符。例如， <code>building-your-1st-django-site</code>。</li><li><code>uuid</code> - 匹配格式化的UUID。要防止多个URL映射到同一页面，必须包含短划线，并且字母必须为小写。例如，<code>075194d3-6885-417e-a8a8-6c931e272f00</code>。返回一个 <a href="https://docs.python.org/3/library/uuid.html#uuid.UUID" target="_blank" rel="noopener"><code>UUID</code></a>实例。</li><li><code>path</code>- 匹配任何非空字符串，包括路径分隔符 <code>&#39;/&#39;</code>。这允许您匹配完整的URL路径，而不仅仅是URL路径的一部分<code>str</code>。</li></ul><h2 id="注册自定义路径转换器"><a href="#注册自定义路径转换器" class="headerlink" title="注册自定义路径转换器"></a>注册自定义路径转换器</h2><p>对于更复杂的匹配要求，您可以定义自己的路径转换器。</p><p>转换器是一个包含以下内容的类：</p><ul><li>一个<code>regex</code>class属性，作为字符串。</li><li>甲方法，它处理匹配的字符串转换成要传递到视图函数的类型。如果它不能转换给定值，它应该提高。<code>to_python(self,value)``ValueError</code></li><li>一种方法，用于处理将Python类型转换为要在URL中使用的字符串。<code>to_url(self, value)</code></li></ul><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class FourDigitYearConverter:</span><br><span class="line">    regex = &apos;[0-9]&#123;4&#125;&apos;</span><br><span class="line"></span><br><span class="line">    def to_python(self, value):</span><br><span class="line">        return int(value)</span><br><span class="line"></span><br><span class="line">    def to_url(self, value):</span><br><span class="line">        return &apos;%04d&apos; % value</span><br></pre></td></tr></table></figure><p>使用<code>register_converter()</code>以下命令在URLconf中注册自定义转换器类 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path, register_converter</span><br><span class="line"></span><br><span class="line">from . import converters, views</span><br><span class="line"></span><br><span class="line">register_converter(converters.FourDigitYearConverter, &apos;yyyy&apos;)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;articles/2003/&apos;, views.special_case_2003),</span><br><span class="line">    path(&apos;articles/&lt;yyyy:year&gt;/&apos;, views.year_archive),</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><p>如果路径和转换器语法不足以定义URL模式，则还可以使用正则表达式。为此，请使用 <code>re_path()</code>而不是<code>path()</code>。</p><p>在Python正则表达式中，命名正则表达式组的语法是<code>(?P&lt;name&gt;pattern)</code>，组<code>name</code>的名称，并且 <code>pattern</code>是要匹配的模式。</p><p>这是前面的示例URLconf，使用正则表达式重写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path, re_path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;articles/2003/&apos;, views.special_case_2003),</span><br><span class="line">    re_path(r&apos;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$&apos;, views.year_archive),</span><br><span class="line">    re_path(r&apos;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/$&apos;, views.month_archive),</span><br><span class="line">    re_path(r&apos;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;slug&gt;[\w-]+)/$&apos;, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这完成了与前一个示例大致相同的事情，除了：</p><ul><li>匹配的确切网址稍微受限制。例如，年份10000将不再匹配，因为年份整数被限制为恰好四位数。</li><li>无论正则表达式的匹配类型如何，每个捕获的参数都将作为字符串发送到视图。</li></ul><p>从使用切换<code>path()</code>到 <code>re_path()</code>反之亦然，特别重要的是要注意视图参数的类型可能会发生变化，因此您可能需要调整视图。</p><h3 id="使用未命名的正则表达式组"><a href="#使用未命名的正则表达式组" class="headerlink" title="使用未命名的正则表达式组"></a>使用未命名的正则表达式组</h3><p>除了命名组语法之外，例如<code>(?P&lt;year&gt;[0-9]{4})</code>，您还可以使用较短的未命名组，例如<code>([0-9]{4})</code>。</p><p>不特别推荐这种用法，因为它更容易在匹配的预期含义和视图的参数之间意外引入错误。</p><p>在任何一种情况下，建议在给定的正则表达式中仅使用一种样式。当两种样式混合使用时，将忽略任何未命名的组，并且只将命名组传递给视图函数。</p><h3 id="嵌套参数"><a href="#嵌套参数" class="headerlink" title="嵌套参数"></a>嵌套参数</h3><p>正则表达式允许嵌套参数，Django将解析它们并将它们传递给视图。反转时，Django将尝试填充所有外部捕获的参数，忽略任何嵌套捕获的参数。考虑以下URL模式，它们可选地采用页面参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import re_path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(r&apos;^blog/(page-(\d+)/)?$&apos;, blog_articles),                  # bad</span><br><span class="line">    re_path(r&apos;^comments/(?:page-(?P&lt;page_number&gt;\d+)/)?$&apos;, comments),  # good</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>两种模式都使用嵌套参数并将解析：例如， <code>blog/page-2/</code>将导致<code>blog_articles</code>与两个位置参数匹配：<code>page-2/</code>和<code>2</code>。第二个模式<code>comments</code>将匹配<code>comments/page-2/</code>关键字参数 <code>page_number</code>设置为2.在这种情况下，外部参数是非捕获参数<code>(?:...)</code>。</p><p>的<code>blog_articles</code>视图需要扭转最外捕获的参数， <code>page-2/</code>或者在这种情况下没有参数，而<code>comments</code>可与任何参数或值被反转<code>page_number</code>。</p><p>嵌套捕获的参数在视图参数和URL之间创建强耦合，如下所示<code>blog_articles</code>：视图接收URL（<code>page-2/</code>）的一部分而不是视图感兴趣的值。这种耦合在反转时更加明显，因为反转我们需要传递一段URL而不是页码的视图。</p><p>根据经验，只捕获视图需要使用的值，并在正则表达式需要参数但视图忽略它时使用非捕获参数。</p><h2 id="URLconf搜索的内容"><a href="#URLconf搜索的内容" class="headerlink" title="URLconf搜索的内容"></a>URLconf搜索的内容</h2><p>URLconf将搜索请求的URL，作为普通的Python字符串。这不包括GET或POST参数或域名。</p><p>例如，在请求中<code>https://www.example.com/myapp/</code>，URLconf将查找<code>myapp/</code>。</p><p>在请求中<code>https://www.example.com/myapp/?page=3</code>，URLconf将查找<code>myapp/</code>。</p><p>URLconf不查看请求方法。换句话说，所有的请求方法- ，，<code>POST</code> 等-将被路由到相同的URL相同的功能。<code>GET``HEAD</code></p><h2 id="指定视图参数的默认值"><a href="#指定视图参数的默认值" class="headerlink" title="指定视图参数的默认值"></a>指定视图参数的默认值</h2><p>一个方便的技巧是为视图的参数指定默认参数。这是一个示例URLconf和视图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># URLconf</span><br><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;blog/&apos;, views.page),</span><br><span class="line">    path(&apos;blog/page&lt;int:num&gt;/&apos;, views.page),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># View (in blog/views.py)</span><br><span class="line">def page(request, num=1):</span><br><span class="line">    # Output the appropriate page of blog entries, according to num.</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>在上面的示例中，两个URL模式都指向同一个视图 <code>views.page</code>- 但第一个模式不会从URL捕获任何内容。如果第一个模式匹配，该<code>page()</code>函数将使用它的默认参数<code>num</code>，<code>1</code>。如果第二个模式匹配， <code>page()</code>将使用<code>num</code>捕获的任何值。</p><h2 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h2><p>a中的每个正则表达式在<code>urlpatterns</code>第一次访问时编译。这使得系统非常快。</p><h2 id="urlpatterns变量的语法"><a href="#urlpatterns变量的语法" class="headerlink" title="urlpatterns变量的语法"></a><code>urlpatterns</code>变量的语法</h2><p><code>urlpatterns</code>应该是Python列表<code>path()</code>和/或 <code>re_path()</code>实例。</p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>当Django找不到所请求URL的匹配项时，或者引发异常时，Django会调用错误处理视图。</p><p>用于这些情况的视图由四个变量指定。它们的默认值应该足以满足大多数项目的需要，但可以通过覆盖它们的默认值来进一步自定义。</p><p>可以在根URLconf中设置此类值。在任何其他URLconf中设置这些变量将不起作用。</p><p>值必须是callables或字符串，表示应该调用以处理手头错误条件的视图的完整Python导入路径。</p><p>变量是：</p><ul><li><code>handler400</code></li><li><code>handler403</code></li><li><code>handler404</code></li><li><code>handler500</code></li></ul><h2 id="包括其他的URLconf"><a href="#包括其他的URLconf" class="headerlink" title="包括其他的URLconf"></a>包括其他的URLconf</h2><p>在任何时候，您<code>urlpatterns</code>都可以“包含”其他URLconf模块。这基本上是“根”一组URL低于其他URL。</p><p>例如，这里是Django网站本身的URLconf的摘录。它包括许多其他URLconf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    # ... snip ...</span><br><span class="line">    path(&apos;community/&apos;, include(&apos;aggregator.urls&apos;)),</span><br><span class="line">    path(&apos;contact/&apos;, include(&apos;contact.urls&apos;)),</span><br><span class="line">    # ... snip ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>每当Django遇到时<code>include()</code>，它都会删除与该点匹配的URL的任何部分，并将剩余的字符串发送到包含的URLconf以进行进一步处理。</p><p>另一种可能性是通过使用<code>path()</code>实例列表来包含其他URL模式 。例如，考虑这个URLconf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import include, path</span><br><span class="line"></span><br><span class="line">from apps.main import views as main_views</span><br><span class="line">from credit import views as credit_views</span><br><span class="line"></span><br><span class="line">extra_patterns = [</span><br><span class="line">    path(&apos;reports/&apos;, credit_views.report),</span><br><span class="line">    path(&apos;reports/&lt;int:id&gt;/&apos;, credit_views.report),</span><br><span class="line">    path(&apos;charge/&apos;, credit_views.charge),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;&apos;, main_views.homepage),</span><br><span class="line">    path(&apos;help/&apos;, include(&apos;apps.help.urls&apos;)),</span><br><span class="line">    path(&apos;credit/&apos;, include(extra_patterns)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在此示例中，<code>/credit/reports/</code>URL将由<code>credit_views.report()</code>Django视图处理 。</p><p>这可用于从重复使用单个模式前缀的URLconf中删除冗余。例如，考虑这个URLconf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;&lt;page_slug&gt;-&lt;page_id&gt;/history/&apos;, views.history),</span><br><span class="line">    path(&apos;&lt;page_slug&gt;-&lt;page_id&gt;/edit/&apos;, views.edit),</span><br><span class="line">    path(&apos;&lt;page_slug&gt;-&lt;page_id&gt;/discuss/&apos;, views.discuss),</span><br><span class="line">    path(&apos;&lt;page_slug&gt;-&lt;page_id&gt;/permissions/&apos;, views.permissions),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们可以通过仅指定公共路径前缀一次并对不同的后缀进行分组来改进这一点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import include, path</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;&lt;page_slug&gt;-&lt;page_id&gt;/&apos;, include([</span><br><span class="line">        path(&apos;history/&apos;, views.history),</span><br><span class="line">        path(&apos;edit/&apos;, views.edit),</span><br><span class="line">        path(&apos;discuss/&apos;, views.discuss),</span><br><span class="line">        path(&apos;permissions/&apos;, views.permissions),</span><br><span class="line">    ])),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="捕获的参数"><a href="#捕获的参数" class="headerlink" title="捕获的参数"></a>捕获的参数</h3><p>包含的URLconf从父URLconf接收任何捕获的参数，因此以下示例有效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># In settings/urls/main.py</span><br><span class="line">from django.urls import include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;&lt;username&gt;/blog/&apos;, include(&apos;foo.urls.blog&apos;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># In foo/urls/blog.py</span><br><span class="line">from django.urls import path</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;&apos;, views.blog.index),</span><br><span class="line">    path(&apos;archive/&apos;, views.blog.archive),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在上面的示例中，捕获的<code>&quot;username&quot;</code>变量按预期传递给包含的URLconf。</p><h2 id="传递额外选项来查看功能"><a href="#传递额外选项来查看功能" class="headerlink" title="传递额外选项来查看功能"></a>传递额外选项来查看功能</h2><p>URLconfs有一个钩子，允许您将额外的参数作为Python字典传递给视图函数。</p><p>该<code>path()</code>函数可以采用可选的第三个参数，该参数应该是传递给视图函数的额外关键字参数的字典。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;blog/&lt;int:year&gt;/&apos;, views.year_archive, &#123;&apos;foo&apos;: &apos;bar&apos;&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在这个例子中，对于请求<code>/blog/2005/</code>，Django将调用 。<code>views.year_archive(request, year=2005, foo=&#39;bar&#39;)</code></p><p>在联合框架中使用此技术 将元数据和选项传递给视图。</p><p>处理冲突</p><p>可以使用URL模式捕获命名关键字参数，并在其额外参数字典中传递具有相同名称的参数。发生这种情况时，将使用字典中的参数而不是URL中捕获的参数。</p><h3 id="将额外选项传递给include"><a href="#将额外选项传递给include" class="headerlink" title="将额外选项传递给include()"></a>将额外选项传递给<code>include()</code></h3><p>同样，您可以传递额外的选项，<code>include()</code>并且包含的URLconf中的每一行都将传递额外的选项。</p><p>例如，这两个URLconf集在功能上是相同的：</p><p>设置一个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># main.py</span><br><span class="line">from django.urls import include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;blog/&apos;, include(&apos;inner&apos;), &#123;&apos;blog_id&apos;: 3&#125;),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># inner.py</span><br><span class="line">from django.urls import path</span><br><span class="line">from mysite import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;archive/&apos;, views.archive),</span><br><span class="line">    path(&apos;about/&apos;, views.about),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>设置二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># main.py</span><br><span class="line">from django.urls import include, path</span><br><span class="line">from mysite import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;blog/&apos;, include(&apos;inner&apos;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># inner.py</span><br><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;archive/&apos;, views.archive, &#123;&apos;blog_id&apos;: 3&#125;),</span><br><span class="line">    path(&apos;about/&apos;, views.about, &#123;&apos;blog_id&apos;: 3&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>请注意，无论行的视图是否实际接受这些选项为有效，额外选项将<em>始终</em>传递到包含的URLconf中的<em>每一</em>行。因此，只有在您确定所包含的URLconf中的每个视图都接受您传递的额外选项时，此技术才有用。</p><h2 id="URL的反向解析"><a href="#URL的反向解析" class="headerlink" title="URL的反向解析"></a>URL的反向解析</h2><p>在处理Django项目时，通常需要获得最终形式的URL，以嵌入生成的内容（视图和资产URL，向用户显示的URL等）或处理服务器上的导航流。方（重定向等）</p><p>强烈希望避免对这些URL进行硬编码（这是一种费力的，不可扩展且容易出错的策略）。同样危险的是设计临时机制来生成与URLconf描述的设计并行的URL，这可能导致生成随时间变得陈旧的URL。</p><p>换句话说，需要的是DRY机制。除了其他优点之外，它还允许进行URL设计的演变，而无需遍历所有项目源代码来搜索和替换过时的URL。</p><p>我们可用于获取URL的主要信息是负责处理URL的视图的标识（例如名称）。必须参与查找正确URL的其他信息是视图参数的类型（位置，关键字）和值。</p><p>Django提供了一个解决方案，使URL映射器成为URL设计的唯一存储库。您使用URLconf提供它，然后它可以在两个方向上使用：</p><ul><li>从用户/浏览器请求的URL开始，它调用正确的Django视图，提供它可能需要的任何参数以及从URL中提取的值。</li><li>从标识相应的Django视图以及将传递给它的参数值开始，获取关联的URL。</li></ul><p>第一个是我们在前面几节中讨论过的用法。第二个是所谓<em>的URL反向解析</em>，<em>反向URL匹配</em>，<em>反向URL查找</em>或简单的<em>URL反转</em>。</p><p>Django提供了用于执行URL反转的工具，这些工具匹配需要URL的不同层：</p><ul><li>在模板中：使用<code>url</code>模板标记。</li><li>在Python代码中：使用该<code>reverse()</code>函数。</li><li>在与处理Django模型实例的URL相关的更高级代码中：该<code>get_absolute_url()</code>方法。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>再次考虑这个URLconf条目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    #...</span><br><span class="line">    path(&apos;articles/&lt;int:year&gt;/&apos;, views.year_archive, name=&apos;news-year-archive&apos;),</span><br><span class="line">    #...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>根据这种设计，对应于年度归档文件的URL <em>NNNN</em> 是<code>/articles/&lt;nnnn&gt;/</code>。</p><p>您可以使用以下方法在模板代码中获取这些：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;% url &apos;news-year-archive&apos; 2012 %&#125;&quot;&gt;2012 Archive&lt;/a&gt;</span><br><span class="line">&#123;# Or with the year in a template context variable: #&#125;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% for yearvar in year_list %&#125;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;&#123;% url &apos;news-year-archive&apos; yearvar %&#125;&quot;&gt;&#123;&#123; yearvar &#125;&#125; Archive&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>或者在Python代码中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponseRedirect</span><br><span class="line">from django.urls import reverse</span><br><span class="line"></span><br><span class="line">def redirect_to_year(request):</span><br><span class="line">    # ...</span><br><span class="line">    year = 2006</span><br><span class="line">    # ...</span><br><span class="line">    return HttpResponseRedirect(reverse(&apos;news-year-archive&apos;, args=(year,)))</span><br></pre></td></tr></table></figure><p>如果由于某种原因决定应该更改发布年度文章档案的内容的URL，那么您只需要更改URLconf中的条目。</p><p>在视图具有通用性的某些情况下，URL和视图之间可能存在多对一关系。对于这些情况，当反转URL时，视图名称不是足够好的标识符。阅读下一节，了解Django为此提供的解决方案。</p><h2 id="命名URL模式"><a href="#命名URL模式" class="headerlink" title="命名URL模式"></a>命名URL模式</h2><p>要执行URL反转，您需要使用<strong>命名URL模式，</strong> 如上面的示例所示。用于URL名称的字符串可以包含您喜欢的任何字符。您不限于有效的Python名称。</p><p>命名URL模式时，请选择不太可能与其他应用程序选择的名称冲突的名称。如果您调用URL模式<code>comment</code> 而另一个应用程序执行相同操作，则<code>reverse()</code>找到的URL 取决于项目<code>urlpatterns</code>列表中最后一个模式。</p><p>在URL名称上添加前缀（可能是从应用程序名称派生的（例如<code>myapp-comment</code>代替<code>comment</code>））可以减少冲突的可能性。</p><p>如果要覆盖视图，可以故意选择<em>与</em>其他应用程序<em>相同的URL名称</em>。例如，一个常见的用例是覆盖 <code>LoginView</code>。Django和大多数第三方应用程序的部分假定此视图具有名称的URL模式 <code>login</code>。如果你有一个自定义登录查看，并给它的URL名称<code>login</code>， <code>reverse()</code>将只要它在找到你的自定义视图 <code>urlpatterns</code>之后，<code>django.contrib.auth.urls</code>包括（如果这是包含在所有）。</p><p>如果参数不同，您也可以对多个URL模式使用相同的名称。除URL名称外，还<code>reverse()</code>匹配参数的数量和关键字参数的名称。</p><h2 id="URL命名空间"><a href="#URL命名空间" class="headerlink" title="URL命名空间"></a>URL命名空间</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>即使不同的应用程序使用相同的URL名称，URL命名空间也允许您唯一地反转。对于第三方应用程序来说，始终使用命名空间URL是一种很好的做法（正如我们在教程中所做的那样）。同样，如果部署了多个应用程序实例，它还允许您反向URL。换句话说，由于单个应用程序的多个实例将共享命名URL，因此命名空间提供了一种将这些命名URL分开的方法。</p><p>正确使用URL命名空间的Django应用程序可以针对特定站点多次部署。例如，[<code>django.contrib.admin</code>]有一个 [<code>AdminSite</code>]类允许您轻松 部署多个admin实例。在后面的示例中，我们将讨论在两个不同位置从教程部署民意调查应用程序的想法，以便我们可以为两个不同的受众（作者和发布者）提供相同的功能。</p><p>URL命名空间分为两部分，两部分都是字符串：</p><ul><li><p>应用命名空间</p><p>这描述了正在部署的应用程序的名称。单个应用程序的每个实例都具有相同的应用程序命名空间。例如，Django的管理应用程序具有可预测的应用程序命名空间<code>&#39;admin&#39;</code>。</p></li><li><p>实例命名空间</p><p>这标识了应用程序的特定实例。实例名称空间在整个项目中应该是唯一的。但是，实例名称空间可以与应用程序名称空间相同。这用于指定应用程序的默认实例。例如，默认的Django管理实例的实例名称空间为<code>&#39;admin&#39;</code>。</p></li></ul><p>命名空间URL使用<code>&#39;:&#39;</code>运算符指定。例如，使用引用管理应用程序的主索引页面<code>&#39;admin:index&#39;</code>。这表示名称空间<code>&#39;admin&#39;</code>和命名URL <code>&#39;index&#39;</code>。</p><p>命名空间也可以嵌套。命名URL <code>&#39;sports:polls:index&#39;</code>将查找<code>&#39;index&#39;</code>在命名空间中命名的模式，该模式<code>&#39;polls&#39;</code>本身在顶级命名空间中定义<code>&#39;sports&#39;</code>。</p><h3 id="反转命名空间的URL"><a href="#反转命名空间的URL" class="headerlink" title="反转命名空间的URL"></a>反转命名空间的URL</h3><p>当给出<code>&#39;polls:index&#39;</code>要解析的命名空间URL（例如）时，Django将完全限定名称拆分为多个部分，然后尝试以下查找：</p><ol><li><p>首先，Django寻找匹配的应用程序命名空间（在本例中<code>&#39;polls&#39;</code>）。这将产生该应用程序的实例列表。</p></li><li><p>如果定义了当前应用程序，Django会查找并返回该实例的URL解析程序。可以使用 函数的<code>current_app</code>参数指定当前应用程序<code>reverse()</code>。</p><p>该<code>url</code>模板标签使用当前解决视图在当前应用程序的命名空间 [<code>RequestContext</code>]。您可以通过在[<code>request.current_app</code>]属性上设置当前应用程序来覆盖此默认值。</p></li><li><p>如果没有当前的申请。Django寻找默认的应用程序实例。默认应用程序实例是具有与应用程序命名空间匹配的实例命名空间的实例（在此示例中，是被调用的实例）。<code>polls``&#39;polls&#39;</code></p></li><li><p>如果没有默认的应用程序实例，Django将选择最后部署的应用程序实例，无论其实例名称是什么。</p></li><li><p>如果提供的命名空间与步骤1 中的应用程序命名空间不匹配，Django将尝试直接查找命名空间作为 实例命名空间。</p></li></ol><p>如果存在嵌套命名空间，则会对命名空间的每个部分重复这些步骤，直到只有视图名称未解析为止。然后，视图名称将被解析为已找到的命名空间中的URL。</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p>要显示此解决方案策略，请考虑<code>polls</code>本教程中应用程序的两个实例的示例：一个调用<code>&#39;author-polls&#39;</code> ，一个调用<code>&#39;publisher-polls&#39;</code>。假设我们已经增强了该应用程序，以便在创建和显示轮询时考虑实例名称空间。</p><p>urls.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;author-polls/&apos;, include(&apos;polls.urls&apos;, namespace=&apos;author-polls&apos;)),</span><br><span class="line">    path(&apos;publisher-polls/&apos;, include(&apos;polls.urls&apos;, namespace=&apos;publisher-polls&apos;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>polls/urls.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">app_name = &apos;polls&apos;</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;&apos;, views.IndexView.as_view(), name=&apos;index&apos;),</span><br><span class="line">    path(&apos;&lt;int:pk&gt;/&apos;, views.DetailView.as_view(), name=&apos;detail&apos;),</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>使用此设置，可以进行以下查找：</p><ul><li><p>如果其中一个实例是最新的 - 例如，如果我们在实例中呈现详细信息页面<code>&#39;author-polls&#39;</code>- <code>&#39;polls:index&#39;</code>将解析为实例的索引页面<code>&#39;author-polls&#39;</code>; 即以下两个都将导致<code>&quot;/author-polls/&quot;</code>。</p><p>在基于类的视图的方法中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reverse(&apos;polls:index&apos;, current_app=self.request.resolver_match.namespace)</span><br></pre></td></tr></table></figure><p>并在模板中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% url &apos;polls:index&apos; %&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果没有当前实例 - 例如，如果我们在网站上的其他位置呈现页面 - <code>&#39;polls:index&#39;</code>将解析为最后一个注册的实例<code>polls</code>。由于没有默认实例（实例名称空间<code>&#39;polls&#39;</code>），因此<code>polls</code>将使用注册的最后一个实例。这将是<code>&#39;publisher-polls&#39;</code>因为它在最后宣布<code>urlpatterns</code>。</p></li><li><p><code>&#39;author-polls:index&#39;</code>将始终解析为实例的索引页面 <code>&#39;author-polls&#39;</code>（同样适用于<code>&#39;publisher-polls&#39;</code>）。</p></li></ul><p>如果还有一个默认实例 - 即一个名为的实例<code>&#39;polls&#39;</code>- 上面的唯一更改是在没有当前实例的情况下（上面列表中的第二项）。在这种情况下，<code>&#39;polls:index&#39;</code> 将解析为默认实例的索引页，而不是最后声明的实例<code>urlpatterns</code>。</p><h3 id="URL命名空间和包含的URLconf"><a href="#URL命名空间和包含的URLconf" class="headerlink" title="URL命名空间和包含的URLconf"></a>URL命名空间和包含的URLconf</h3><p>包含的URLconf的应用程序命名空间可以用两种方式指定。</p><p>首先，您可以<code>app_name</code>在包含的URLconf模块中设置属性，该属性与属性处于同一级别<code>urlpatterns</code>。您必须将实际模块或对模块的字符串引用传递给它<code>include()</code>，而不是<code>urlpatterns</code>它自己的列表。</p><p>polls/urls.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">app_name = &apos;polls&apos;</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;&apos;, views.IndexView.as_view(), name=&apos;index&apos;),</span><br><span class="line">    path(&apos;&lt;int:pk&gt;/&apos;, views.DetailView.as_view(), name=&apos;detail&apos;),</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>urls.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;polls/&apos;, include(&apos;polls.urls&apos;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>定义的URL <code>polls.urls</code>将具有应用程序命名空间<code>polls</code>。</p><p>其次，您可以包含一个包含嵌入式命名空间数据的对象。如果<code>include()</code>是列表<a href="https://docs.djangoproject.com/en/2.0/ref/urls/#django.urls.path" target="_blank" rel="noopener"><code>path()</code></a>或 <a href="https://docs.djangoproject.com/en/2.0/ref/urls/#django.urls.re_path" target="_blank" rel="noopener"><code>re_path()</code></a>实例，则该对象中包含的URL将添加到全局命名空间。但是，您还可以<code>include()</code>使用包含以下内容的2元组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&lt;list of path()/re_path() instances&gt;, &lt;application namespace&gt;)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import include, path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">polls_patterns = ([</span><br><span class="line">    path(&apos;&apos;, views.IndexView.as_view(), name=&apos;index&apos;),</span><br><span class="line">    path(&apos;&lt;int:pk&gt;/&apos;, views.DetailView.as_view(), name=&apos;detail&apos;),</span><br><span class="line">], &apos;polls&apos;)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;polls/&apos;, include(polls_patterns)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这将在指定的应用程序命名空间中包含指定的URL模式。</p><p>可以使用<code>namespace</code>参数to 指定实例名称空间<a href="https://docs.djangoproject.com/en/2.0/ref/urls/#django.urls.include" target="_blank" rel="noopener"><code>include()</code></a>。如果未指定实例名称空间，则它将默认为包含的URLconf的应用程序名称空间。这意味着它也将是该命名空间的默认实例。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置（Setting）</title>
      <link href="/2019/06/03/django-setting/"/>
      <url>/2019/06/03/django-setting/</url>
      
        <content type="html"><![CDATA[<h1 id="Django的项目设置（Setting）"><a href="#Django的项目设置（Setting）" class="headerlink" title="Django的项目设置（Setting）"></a>Django的项目设置（Setting）</h1><h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h2><p><strong>DJANGO_SETTING_MODULE环境变量</strong>：</p><p>让settings模块被包含到python可以找到的目录下，开发情况下不需要，我们通常会在当前文件夹运行，python可以搜索到。</p><p>如果需要运行在其他服务器上，就必须指定DJANGO_SETTINGS_MODULE变量。</p><h2 id="2-默认设定"><a href="#2-默认设定" class="headerlink" title="2.默认设定"></a>2.默认设定</h2><p>一个django的settings文件不需要我们手动去设置所有项目，因为系统已经默认设置好了。我们只需要修改我们使用的设</p><p>定就好了。默认的设置在django/conf/global_settings.py文件中。</p><p>django在编译时，先载入global_settings.py中的配置，然后加载指定的settings文件，重写改变的设定。</p><p>好了，步入正文。</p><p>前面的随笔中我们经常会改setting配置也经常将一些配置混淆今天主要是将一些常见的配置做一个汇总。</p><h2 id="3-setting配置汇总"><a href="#3-setting配置汇总" class="headerlink" title="3.setting配置汇总"></a><strong>3.setting配置汇总</strong></h2><h3 id="1）项目"><a href="#1）项目" class="headerlink" title="1）项目"></a>1）项目</h3><p>通过os模块，获取当前项目在系统的具体路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line"># 项目路径</span><br><span class="line"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br></pre></td></tr></table></figure><h3 id="2）密钥配置"><a href="#2）密钥配置" class="headerlink" title="2）密钥配置"></a>2）密钥配置</h3><p>随机值，在项目创建的时候生成，主要用于重要数据的加密处理，提高系统的安全性， 主要用于用户密码，CSRF机制和会话Session等数据加密。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SECRET_KEY = &apos;g(eqo*xohqzl9-&amp;&amp;k)-+@5^&amp;_xd+9s9muhe7iy#6$-gv_s_e#f&apos;</span><br></pre></td></tr></table></figure><h3 id="3）调试模式和域名访问权限"><a href="#3）调试模式和域名访问权限" class="headerlink" title="3）调试模式和域名访问权限"></a>3）调试模式和域名访问权限</h3><p>调试模式为布尔值，在开发调试过程中，自动检测代码是否发生更改，根据检测结果执行是否刷新重启系统。</p><p>域名访问权限，设置可访问的域名，默认值为空。</p><p>当开启调试模式时，可访问域名为空，则项目只允许以loaclhost或者127.0.0.1在浏览器访问。</p><p>在生产环境配置时，需要关闭调试模式，并且，此时的ALLOWED_HOSTS为必填项。</p><p>ALLOWED_HOSTS = [‘*’]  表示允许所有域名访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># SECURITY WARNING: don&apos;t run with debug turned on in production!</span><br><span class="line"># 生产环境配置</span><br><span class="line">DEBUG = False</span><br><span class="line">ALLOWED_HOSTS = [&apos;*&apos;]  </span><br><span class="line"></span><br><span class="line"># 测试环境配置</span><br><span class="line">DEBUG = True</span><br><span class="line">ALLOWED_HOSTS = []</span><br></pre></td></tr></table></figure><h3 id="4）app路径"><a href="#4）app路径" class="headerlink" title="4）app路径"></a>4）app路径</h3><p>app列表，django项目里，包含了哪些内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,   # 内置的后台管理系统</span><br><span class="line">    &apos;django.contrib.auth&apos;,   # 内置的用户认证系统</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,   # 记录项目中所有model元数据（Django自带的ORM框架）</span><br><span class="line">    &apos;django.contrib.sessions&apos;,    # 会话功能</span><br><span class="line">    &apos;django.contrib.messages&apos;,   # 消息提示功能</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,   # 查找静态资源路径</span><br><span class="line">    &apos;study.apps.StudyConfig&apos;,    # 自定义App</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="5）中间件"><a href="#5）中间件" class="headerlink" title="5）中间件"></a>5）中间件</h3><p>中间件（MIDDLEWARE）是处理Django的request和response对象的钩子。</p><p>他的主要作用是处理用户请求信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    &apos;django.middleware.security.SecurityMiddleware&apos;,   # 内置的安全机制，保护用户和网站的通信安全</span><br><span class="line">    &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;,  # 会话session功能</span><br><span class="line">    &apos;django.middleware.common.CommonMiddleware&apos;,   # 处理请求信息，规范化请求内容。</span><br><span class="line">    &apos;django.middleware.csrf.CsrfViewMiddleware&apos;,        # 开启CSRF防护功能</span><br><span class="line">    &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;,   # 开启内置的用户认证系统</span><br><span class="line">    &apos;django.contrib.messages.middleware.MessageMiddleware&apos;,   # 开启内置的信息提示功能</span><br><span class="line">    &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,   # 防止恶意程序点击劫持。</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="6）模板路径"><a href="#6）模板路径" class="headerlink" title="6）模板路径"></a>6）模板路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        &apos;BACKEND&apos;: &apos;django.template.backends.django.DjangoTemplates&apos;,   # 定义模板引擎，用户识别模板里面的变量和指令</span><br><span class="line">        &apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates&apos;)]    # 设置模板所在的路径，可配置多个路径</span><br><span class="line">        # 数据类型：列表list，[os.path.join(BASE_DIR, &apos;templates&apos;),os.path.join(BASE_DIR, &apos;study/templates&apos;)]</span><br><span class="line">        ,</span><br><span class="line">        &apos;APP_DIRS&apos;: True,   # 是否在app中查找模板文件</span><br><span class="line">        # 用于填充在RequestContext中上下文的调用函数，一般情况不用修改</span><br><span class="line">        &apos;OPTIONS&apos;: &#123;</span><br><span class="line">            &apos;context_processors&apos;: [</span><br><span class="line">                &apos;django.template.context_processors.debug&apos;,</span><br><span class="line">                &apos;django.template.context_processors.request&apos;,</span><br><span class="line">                &apos;django.contrib.auth.context_processors.auth&apos;,</span><br><span class="line">                &apos;django.contrib.messages.context_processors.messages&apos;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="7）数据库配置"><a href="#7）数据库配置" class="headerlink" title="7）数据库配置"></a><strong>7）数据库配置</strong></h3><p>如果使用django的默认sqlite3数据库则不需要改。</p><p>django一共提供了4种数据引擎，每一种引擎对应一种数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">django.db.backends.sqlite3</span><br><span class="line">django.db.backends.postgresql</span><br><span class="line">django.db.backends.mysql</span><br><span class="line">django.db.backends.oracle</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用mysql数据库需要将上述数据库注掉修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;blog&apos;,   # 数据库名称</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,   #你的数据库用户名</span><br><span class="line">        &apos;PASSWORD&apos;:&apos;&apos; ,   #你的数据库密码</span><br><span class="line">        &apos;HOST&apos;:&apos;&apos;,        #你的数据库主机，留空默认为localhost</span><br><span class="line">        &apos;PORT&apos;:&apos;3306&apos;     #你的数据库端口</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且需要在应用的<strong>init</strong>.py文件添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h3 id="8）语言配置"><a href="#8）语言配置" class="headerlink" title="8）语言配置"></a>8）<strong>语言配置</strong></h3><p>django的目录下，django/conf/locale，可以找到很多的语言包，选择你想要配置的语言包添加进去配置。</p><p>zh_Hans代表中文简体</p><p>zh_Hant代表中文繁体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = &apos;en-us&apos;    #  默认英文</span><br><span class="line">LANGUAGE_CODE = &apos;zh-Hans&apos;    # 修改为中文</span><br></pre></td></tr></table></figure><h3 id="9）时间配置"><a href="#9）时间配置" class="headerlink" title="9）时间配置"></a>9）时间配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TIME_ZONE = &apos;UTC&apos;</span><br><span class="line">TIME_ZONE = &apos;Asia/Shanghai&apos;</span><br></pre></td></tr></table></figure><h3 id="10）时区设置"><a href="#10）时区设置" class="headerlink" title="10）时区设置"></a>10）时区设置</h3><p>​    因为Mysql存储的时间不能灵活设置时区，不像datetime对象有一项参数专门指定时区，所以为了统一全球的时间，必须使用国际标准时间UTC，否则就会乱套。所有时间在存如数据库前，必须转换成UTC时间。比如北京时间8点，存入mysql变成0点（UTC）。</p><p>一般不跨时区的应用，可以不使用时区，即在settings.py设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE_TZ = True</span><br><span class="line"></span><br><span class="line">USE_TZ = False</span><br></pre></td></tr></table></figure><h3 id="11）静态文件目录"><a href="#11）静态文件目录" class="headerlink" title="11）静态文件目录"></a>11）静态文件目录</h3><p>这个路径只用于django提供的静态资源加载服务。</p><p>若部署之后，则这里的配置需要更改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &apos;/static/&apos; #调用时目录</span><br><span class="line">STATICFILES_DIRS=[</span><br><span class="line"> os.path.join(BASE_DIR,&quot;static&quot;), #具体路径</span><br><span class="line">]</span><br><span class="line"># 静态资源文件</span><br><span class="line">STATICFILES_DIRS = (os.path.join(BASE_DIR, &quot;statics&quot;),)   # 现添加的配置,这里是元组，注意逗号</span><br><span class="line">#  我们一般只用 STATIC_URL，但STATIC_URL会按着你的STATICFILES_DIRS去找</span><br></pre></td></tr></table></figure><h3 id="12）如果数据库中的UserInfo-用户表-继承django内置AbstractUser"><a href="#12）如果数据库中的UserInfo-用户表-继承django内置AbstractUser" class="headerlink" title="12）如果数据库中的UserInfo(用户表)继承django内置AbstractUser"></a><strong>12）如果数据库中的UserInfo(用户表)继承django内置AbstractUser</strong></h3><p>1）model需导入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth.models import AbstractUser</span><br></pre></td></tr></table></figure><p>2）配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AUTH_USER_MODEL = &quot;应用名.UserInfo&quot;</span><br></pre></td></tr></table></figure><h3 id="13）session存储的相关配置"><a href="#13）session存储的相关配置" class="headerlink" title="13）session存储的相关配置"></a><strong>13）session存储的相关配置</strong></h3><p>1）数据库配置（默认）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Django默认支持Session，并且默认是将Session数据存储在数据库中，即：django_session 表中。</span><br><span class="line">配置 settings.py</span><br><span class="line"> SESSION_ENGINE = &apos;django.contrib.sessions.backends.db&apos; # 引擎（默认）</span><br><span class="line"> SESSION_COOKIE_NAME ＝ &quot;sessionid&quot;   # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）</span><br><span class="line"> SESSION_COOKIE_PATH ＝ &quot;/&quot;    # Session的cookie保存的路径（默认）</span><br><span class="line"> SESSION_COOKIE_DOMAIN = None    # Session的cookie保存的域名（默认）</span><br><span class="line"> SESSION_COOKIE_SECURE = False    # 是否Https传输cookie（默认）</span><br><span class="line"> SESSION_COOKIE_HTTPONLY = True    # 是否Session的cookie只支持http传输（默认）</span><br><span class="line"> SESSION_COOKIE_AGE = 1209600    # Session的cookie失效日期（2周）（默认）</span><br><span class="line"> SESSION_EXPIRE_AT_BROWSER_CLOSE = False   # 是否关闭浏览器使得Session过期（默认）</span><br><span class="line"> SESSION_SAVE_EVERY_REQUEST = False   # 是否每次请求都保存Session，默认修改之后才保存（默认）</span><br></pre></td></tr></table></figure><p>2）缓存配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">配置 settings.py</span><br><span class="line"> SESSION_ENGINE = &apos;django.contrib.sessions.backends.cache&apos; # 引擎</span><br><span class="line"> SESSION_CACHE_ALIAS = &apos;default&apos;    # 使用的缓存别名（默认内存缓存，也可以是memcache），此处别名依赖缓存的设置</span><br><span class="line"> SESSION_COOKIE_NAME ＝ &quot;sessionid&quot;   # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串</span><br><span class="line"> SESSION_COOKIE_PATH ＝ &quot;/&quot;    # Session的cookie保存的路径</span><br><span class="line"> SESSION_COOKIE_DOMAIN = None    # Session的cookie保存的域名</span><br><span class="line"> SESSION_COOKIE_SECURE = False    # 是否Https传输cookie</span><br><span class="line"> SESSION_COOKIE_HTTPONLY = True    # 是否Session的cookie只支持http传输</span><br><span class="line"> SESSION_COOKIE_AGE = 1209600    # Session的cookie失效日期（2周）</span><br><span class="line"> SESSION_EXPIRE_AT_BROWSER_CLOSE = False   # 是否关闭浏览器使得Session过期</span><br><span class="line"> SESSION_SAVE_EVERY_REQUEST = False   # 是否每次请求都保存Session，默认修改之后才保存</span><br></pre></td></tr></table></figure><p>3）默认配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">配置 settings.py</span><br><span class="line"> SESSION_ENGINE = &apos;django.contrib.sessions.backends.file&apos; # 引擎</span><br><span class="line"> SESSION_FILE_PATH = None     # 缓存文件路径，如果为None，则使用tempfile模块获取一个临时地址tempfile.gettempdir() </span><br><span class="line"> SESSION_COOKIE_NAME ＝ &quot;sessionid&quot;    # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串</span><br><span class="line"> SESSION_COOKIE_PATH ＝ &quot;/&quot;     # Session的cookie保存的路径</span><br><span class="line"> SESSION_COOKIE_DOMAIN = None    # Session的cookie保存的域名</span><br><span class="line"> SESSION_COOKIE_SECURE = False    # 是否Https传输cookie</span><br><span class="line"> SESSION_COOKIE_HTTPONLY = True    # 是否Session的cookie只支持http传输</span><br><span class="line"> SESSION_COOKIE_AGE = 1209600    # Session的cookie失效日期（2周）</span><br><span class="line"> SESSION_EXPIRE_AT_BROWSER_CLOSE = False   # 是否关闭浏览器使得Session过期</span><br><span class="line"> SESSION_SAVE_EVERY_REQUEST = False    # 是否每次请求都保存Session，默认修改之后才保存</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>1）也可以自定义配置 但是自定义的配置都要写到配置文件最后 代码中使用时可以导入配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from django.conf import settings</span><br><span class="line">settings.配置名</span><br></pre></td></tr></table></figure><p>2）上面所有配置都是针对特定问题需要修改的 系统默认配置不做说明</p><p>3）上面配置只是前面django系列随笔所遇到的常用配置 后续所遇配置都会逐步在此随笔中持续添加跟新</p><h2 id="4-日志配置详解"><a href="#4-日志配置详解" class="headerlink" title="4.日志配置详解"></a>4.日志配置详解</h2><h3 id="1）Logger"><a href="#1）Logger" class="headerlink" title="1）Logger"></a>1）Logger</h3><p>记录器是记录系统的入口点。每个记录器都是一个命名存储桶，可以将消息写入进行处理。</p><p>记录器配置为具有<em>日志级别</em>。此日志级别描述了记录器将处理的消息的严重性。Python定义了以下日志级别：</p><ul><li><code>DEBUG</code>：用于调试目的的低级系统信息</li><li><code>INFO</code>：一般系统信息</li><li><code>WARNING</code>：描述已发生的小问题的信息。</li><li><code>ERROR</code>：描述已发生的主要问题的信息。</li><li><code>CRITICAL</code>：描述已发生的严重问题的信息。</li></ul><p>一旦记录器确定需要处理消息，它就会传递给<em>处理程序</em>。</p><h3 id="2）处理程序"><a href="#2）处理程序" class="headerlink" title="2）处理程序"></a>2）处理程序</h3><p>处理程序是确定记录器中每条消息发生情况的引擎。它描述了特定的日志记录行为，例如将消息写入屏幕，文件或网络套接字。</p><p>与记录器一样，处理程序也具有日志级别。如果日志记录的日志级别未达到或超过处理程序的级别，则处理程序将忽略该消息。</p><p>记录器可以有多个处理程序，每个处理程序可以具有不同的日志级别。以这种方式，可以根据消息的重要性提供不同形式的通知。</p><h3 id="3）过滤器"><a href="#3）过滤器" class="headerlink" title="3）过滤器"></a>3）过滤器</h3><ul><li>过滤器用于提供对从记录器到处理程序的日志记录传递的额外控制。</li><li>默认情况下，将处理满足日志级别要求的任何日志消息。但是，通过安装筛选器，您可以在日志记录过程中添加其他条件<ul><li>例如，您可以安装仅允许<code>ERROR</code>发出来自特定源的消息的过滤器。</li></ul></li><li>过滤器还可用于在发出之前修改日志记录。<ul><li>例如，如果满足一组特定条件，您可以编写一个过滤器，将<code>ERROR</code>日志记录降级 为<code>WARNING</code>记录。</li></ul></li><li>过滤器可以安装在记录器或处理器上; 可以在链中使用多个过滤器来执行多个过滤操作。</li></ul><h3 id="4）格式化程序"><a href="#4）格式化程序" class="headerlink" title="4）格式化程序"></a>4）格式化程序</h3><p>​    最终，日志记录需要呈现为文本。格式化程序描述该文本的确切格式。格式化程序通常由包含LogRecord属性的Python格式化字符串组成 ; 但是，您也可以编写自定义格式化程序来实现特定的格式化行为。</p><h3 id="5）使用日志记录"><a href="#5）使用日志记录" class="headerlink" title="5）使用日志记录"></a>5）使用日志记录</h3><p>配置记录器，处理程序，过滤器和格式化程序后，需要将日志记录调用放入代码中。使用日志框架非常简单。这是一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># import the logging library</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line"># Get an instance of a logger</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">def my_view(request, arg1, arg):</span><br><span class="line">    ...</span><br><span class="line">    if bad_mojo:</span><br><span class="line">        # Log an error message</span><br><span class="line">        logger.error(&apos;Something went wrong!&apos;)</span><br></pre></td></tr></table></figure><h3 id="6）配置日志记录"><a href="#6）配置日志记录" class="headerlink" title="6）配置日志记录"></a>6）配置日志记录</h3><p>常用配置，日志配置例子2个，以供大家参考。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">cur_path = os.path.dirname(os.path.realpath(__file__))  # log_path是存放日志的路径</span><br><span class="line">log_path = os.path.join(os.path.dirname(cur_path), &apos;logs&apos;)</span><br><span class="line">if not os.path.exists(log_path): os.mkdir(log_path)  # 如果不存在这个logs文件夹，就自动创建一个</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">BASE_LOG_DIR = os.path.join(BASE_DIR, &quot;log&quot;)</span><br><span class="line"></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    &apos;version&apos;: 1,</span><br><span class="line">    &apos;disable_existing_loggers&apos;: False,</span><br><span class="line">    &apos;formatters&apos;: &#123;</span><br><span class="line">        &apos;standard&apos;: &#123;</span><br><span class="line">            &apos;format&apos;: &apos;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&apos;</span><br><span class="line">                      &apos;[%(levelname)s][%(message)s]&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;simple&apos;: &#123;</span><br><span class="line">            &apos;format&apos;: &apos;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;collect&apos;: &#123;</span><br><span class="line">            &apos;format&apos;: &apos;%(message)s&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;filters&apos;: &#123;</span><br><span class="line">        &apos;require_debug_true&apos;: &#123;</span><br><span class="line">            &apos;()&apos;: &apos;django.utils.log.RequireDebugTrue&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;handlers&apos;: &#123;</span><br><span class="line">        &apos;console&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;DEBUG&apos;,</span><br><span class="line">            &apos;filters&apos;: [&apos;require_debug_true&apos;],  # 只有在Django debug为True时才在屏幕打印日志</span><br><span class="line">            &apos;class&apos;: &apos;logging.StreamHandler&apos;,</span><br><span class="line">            &apos;formatter&apos;: &apos;simple&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;SF&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;,  # 保存到文件，根据文件大小自动切</span><br><span class="line">            &apos;filename&apos;: os.path.join(BASE_LOG_DIR, &quot;xxx_info.log&quot;),  # 日志文件</span><br><span class="line">            &apos;maxBytes&apos;: 1024 * 1024 * 50,  # 日志大小 50M</span><br><span class="line">            &apos;backupCount&apos;: 3,  # 备份数为3  xx.log --&gt; xx.log.1 --&gt; xx.log.2 --&gt; xx.log.3</span><br><span class="line">            &apos;formatter&apos;: &apos;standard&apos;,</span><br><span class="line">            &apos;encoding&apos;: &apos;utf-8&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;TF&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.handlers.TimedRotatingFileHandler&apos;,  # 保存到文件，根据时间自动切</span><br><span class="line">            &apos;filename&apos;: os.path.join(BASE_LOG_DIR, &quot;xxx_info.log&quot;),  # 日志文件</span><br><span class="line">            &apos;backupCount&apos;: 3,  # 备份数为3  xx.log --&gt; xx.log.2018-08-23_00-00-00 --&gt; xx.log.2018-08-24_00-00-00 --&gt; ...</span><br><span class="line">            &apos;when&apos;: &apos;D&apos;,  # 每天一切， 可选值有S/秒 M/分 H/小时 D/天 W0-W6/周(0=周一) midnight/如果没指定时间就默认在午夜</span><br><span class="line">            &apos;formatter&apos;: &apos;standard&apos;,</span><br><span class="line">            &apos;encoding&apos;: &apos;utf-8&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;error&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;ERROR&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;,  # 保存到文件，自动切</span><br><span class="line">            &apos;filename&apos;: os.path.join(BASE_LOG_DIR, &quot;xxx_err.log&quot;),  # 日志文件</span><br><span class="line">            &apos;maxBytes&apos;: 1024 * 1024 * 5,  # 日志大小 50M</span><br><span class="line">            &apos;backupCount&apos;: 5,</span><br><span class="line">            &apos;formatter&apos;: &apos;standard&apos;,</span><br><span class="line">            &apos;encoding&apos;: &apos;utf-8&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;collect&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;,  # 保存到文件，自动切</span><br><span class="line">            &apos;filename&apos;: os.path.join(BASE_LOG_DIR, &quot;xxx_collect.log&quot;),</span><br><span class="line">            &apos;maxBytes&apos;: 1024 * 1024 * 50,  # 日志大小 50M</span><br><span class="line">            &apos;backupCount&apos;: 5,</span><br><span class="line">            &apos;formatter&apos;: &apos;collect&apos;,</span><br><span class="line">            &apos;encoding&apos;: &quot;utf-8&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;loggers&apos;: &#123;</span><br><span class="line">        &apos;&apos;: &#123;  # 默认的logger应用如下配置</span><br><span class="line">            &apos;handlers&apos;: [&apos;SF&apos;, &apos;console&apos;, &apos;error&apos;],  # 上线之后可以把&apos;console&apos;移除</span><br><span class="line">            &apos;level&apos;: &apos;DEBUG&apos;,</span><br><span class="line">            &apos;propagate&apos;: True,</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;collect&apos;: &#123;  # 名为 &apos;collect&apos;的logger还单独处理</span><br><span class="line">            &apos;handlers&apos;: [&apos;console&apos;, &apos;collect&apos;],</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    &apos;version&apos;: 1,</span><br><span class="line">    &apos;disable_existing_loggers&apos;: True,</span><br><span class="line">    &apos;formatters&apos;: &#123;</span><br><span class="line">        # 日志格式</span><br><span class="line">        &apos;standard&apos;: &#123;</span><br><span class="line">            &apos;format&apos;: &apos;[%(asctime)s] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] &apos;</span><br><span class="line">                      &apos;[%(levelname)s]- %(message)s&apos;&#125;,</span><br><span class="line">        &apos;simple&apos;: &#123;  # 简单格式</span><br><span class="line">            &apos;format&apos;: &apos;%(levelname)s %(message)s&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    # 过滤</span><br><span class="line">    &apos;filters&apos;: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    # 定义具体处理日志的方式</span><br><span class="line">    &apos;handlers&apos;: &#123;</span><br><span class="line">        # 默认记录所有日志</span><br><span class="line">        &apos;default&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;,</span><br><span class="line">            &apos;filename&apos;: os.path.join(log_path, &apos;all-&#123;&#125;.log&apos;.format(time.strftime(&apos;%Y-%m-%d&apos;))),</span><br><span class="line">            &apos;maxBytes&apos;: 1024 * 1024 * 5,  # 文件大小</span><br><span class="line">            &apos;backupCount&apos;: 5,  # 备份数</span><br><span class="line">            &apos;formatter&apos;: &apos;standard&apos;,  # 输出格式</span><br><span class="line">            &apos;encoding&apos;: &apos;utf-8&apos;,  # 设置默认编码，否则打印出来汉字乱码</span><br><span class="line">        &#125;,</span><br><span class="line">        # 输出错误日志</span><br><span class="line">        &apos;error&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;ERROR&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;,</span><br><span class="line">            &apos;filename&apos;: os.path.join(log_path, &apos;error-&#123;&#125;.log&apos;.format(time.strftime(&apos;%Y-%m-%d&apos;))),</span><br><span class="line">            &apos;maxBytes&apos;: 1024 * 1024 * 5,  # 文件大小</span><br><span class="line">            &apos;backupCount&apos;: 5,  # 备份数</span><br><span class="line">            &apos;formatter&apos;: &apos;standard&apos;,  # 输出格式</span><br><span class="line">            &apos;encoding&apos;: &apos;utf-8&apos;,  # 设置默认编码</span><br><span class="line">        &#125;,</span><br><span class="line">        # 控制台输出</span><br><span class="line">        &apos;console&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;DEBUG&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.StreamHandler&apos;,</span><br><span class="line">            &apos;formatter&apos;: &apos;standard&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        # 输出info日志</span><br><span class="line">        &apos;info&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;,</span><br><span class="line">            &apos;filename&apos;: os.path.join(log_path, &apos;info-&#123;&#125;.log&apos;.format(time.strftime(&apos;%Y-%m-%d&apos;))),</span><br><span class="line">            &apos;maxBytes&apos;: 1024 * 1024 * 5,</span><br><span class="line">            &apos;backupCount&apos;: 5,</span><br><span class="line">            &apos;formatter&apos;: &apos;standard&apos;,</span><br><span class="line">            &apos;encoding&apos;: &apos;utf-8&apos;,  # 设置默认编码</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    # 配置用哪几种 handlers 来处理日志</span><br><span class="line">    &apos;loggers&apos;: &#123;</span><br><span class="line">        # 类型 为 django 处理所有类型的日志， 默认调用</span><br><span class="line">        &apos;django&apos;: &#123;</span><br><span class="line">            &apos;handlers&apos;: [&apos;default&apos;, &apos;console&apos;],</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">            &apos;propagate&apos;: False</span><br><span class="line">        &#125;,</span><br><span class="line">        # log 调用时需要当作参数传入</span><br><span class="line">        &apos;log&apos;: &#123;</span><br><span class="line">            &apos;handlers&apos;: [&apos;error&apos;, &apos;info&apos;, &apos;console&apos;, &apos;default&apos;],</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">            &apos;propagate&apos;: True</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7）添加发送邮件"><a href="#7）添加发送邮件" class="headerlink" title="7）添加发送邮件"></a>7）添加发送邮件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#管理员邮箱</span><br><span class="line">ADMINS = (</span><br><span class="line"> (&apos;laixintao&apos;,&apos;*******@163.com&apos;),</span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line">#非空链接，却发生404错误，发送通知MANAGERS</span><br><span class="line">SEND_BROKEN_LINK_EMAILS = True</span><br><span class="line">MANAGERS = ADMINS</span><br><span class="line">  </span><br><span class="line">#Email设置</span><br><span class="line">EMAIL_BACKEND = &apos;django.core.mail.backends.smtp.EmailBackend&apos;</span><br><span class="line">EMAIL_HOST= &apos;smtp.163.com&apos;#QQ邮箱SMTP服务器(邮箱需要开通SMTP服务)</span><br><span class="line">EMAIL_PORT= 25 #QQ邮箱SMTP服务端口</span><br><span class="line">EMAIL_HOST_USER = &apos;**********@163.com&apos; #我的邮箱帐号</span><br><span class="line">EMAIL_HOST_PASSWORD = &apos;**************&apos; #授权码</span><br><span class="line">EMAIL_SUBJECT_PREFIX = &apos;website&apos; #为邮件标题的前缀,默认是&apos;[django]&apos;</span><br><span class="line">EMAIL_USE_TLS = True #开启安全链接</span><br><span class="line">DEFAULT_FROM_EMAIL = SERVER_EMAIL = EMAIL_HOST_USER #设置发件人</span><br><span class="line">  </span><br><span class="line">#logging日志配置</span><br><span class="line">LOGGING = &#123;</span><br><span class="line"> &apos;version&apos;: 1,</span><br><span class="line"> &apos;disable_existing_loggers&apos;: True,</span><br><span class="line"> &apos;formatters&apos;: &#123;#日志格式 </span><br><span class="line"> &apos;standard&apos;: &#123;</span><br><span class="line">  &apos;format&apos;: &apos;%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s&apos;&#125; </span><br><span class="line"> &#125;,</span><br><span class="line"> &apos;filters&apos;: &#123;#过滤器</span><br><span class="line"> &apos;require_debug_false&apos;: &#123;</span><br><span class="line">  &apos;()&apos;: &apos;django.utils.log.RequireDebugFalse&apos;,</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> &apos;handlers&apos;: &#123;#处理器</span><br><span class="line"> &apos;null&apos;: &#123;</span><br><span class="line">  &apos;level&apos;: &apos;DEBUG&apos;,</span><br><span class="line">  &apos;class&apos;: &apos;logging.NullHandler&apos;,</span><br><span class="line"> &#125;,</span><br><span class="line"> &apos;mail_admins&apos;: &#123;#发送邮件通知管理员</span><br><span class="line">  &apos;level&apos;: &apos;ERROR&apos;,</span><br><span class="line">  &apos;class&apos;: &apos;django.utils.log.AdminEmailHandler&apos;,</span><br><span class="line">  &apos;filters&apos;: [&apos;require_debug_false&apos;],# 仅当 DEBUG = False 时才发送邮件</span><br><span class="line">  &apos;include_html&apos;: True,</span><br><span class="line"> &#125;,</span><br><span class="line"> &apos;debug&apos;: &#123;#记录到日志文件(需要创建对应的目录，否则会出错)</span><br><span class="line">  &apos;level&apos;:&apos;DEBUG&apos;,</span><br><span class="line">  &apos;class&apos;:&apos;logging.handlers.RotatingFileHandler&apos;,</span><br><span class="line">  &apos;filename&apos;: os.path.join(BASE_DIR, &quot;log&quot;,&apos;debug.log&apos;),#日志输出文件</span><br><span class="line">  &apos;maxBytes&apos;:1024*1024*5,#文件大小 </span><br><span class="line">  &apos;backupCount&apos;: 5,#备份份数</span><br><span class="line">  &apos;formatter&apos;:&apos;standard&apos;,#使用哪种formatters日志格式</span><br><span class="line"> &#125;,</span><br><span class="line"> &apos;console&apos;:&#123;#输出到控制台</span><br><span class="line">  &apos;level&apos;: &apos;DEBUG&apos;,</span><br><span class="line">  &apos;class&apos;: &apos;logging.StreamHandler&apos;,</span><br><span class="line">  &apos;formatter&apos;: &apos;standard&apos;,</span><br><span class="line"> &#125;,</span><br><span class="line"> &#125;,</span><br><span class="line"> &apos;loggers&apos;: &#123;#logging管理器</span><br><span class="line"> &apos;django&apos;: &#123;</span><br><span class="line">  &apos;handlers&apos;: [&apos;console&apos;],</span><br><span class="line">  &apos;level&apos;: &apos;DEBUG&apos;,</span><br><span class="line">  &apos;propagate&apos;: False</span><br><span class="line"> &#125;,</span><br><span class="line"> &apos;django.request&apos;: &#123;</span><br><span class="line">  &apos;handlers&apos;: [&apos;debug&apos;,&apos;mail_admins&apos;],</span><br><span class="line">  &apos;level&apos;: &apos;ERROR&apos;,</span><br><span class="line">  &apos;propagate&apos;: True,</span><br><span class="line"> &#125;,</span><br><span class="line"> # 对于不在 ALLOWED_HOSTS 中的请求不发送报错邮件</span><br><span class="line"> &apos;django.security.DisallowedHost&apos;: &#123;</span><br><span class="line">  &apos;handlers&apos;: [&apos;null&apos;],</span><br><span class="line">  &apos;propagate&apos;: False,</span><br><span class="line"> &#125;,</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的配置文件中，有三个日志处理器。分别是：</p><ul><li>‘django.request’：django的request发生error会自动记录，然后使用debug将信息记录到文件，还有mail_admins将信息通过邮件发送给管理员。这里邮件的功能非常棒！并不是一个纯文本信息，而是一个html文件，和我们在浏览器看到的错误页面一模一样！要正常使用邮件功能需要像我一样配置一下上面的邮件发件人信息。我是直接去网易申请了一个邮箱。要格外注意三点：<ul><li>一定要去邮件服务商开启SMTP服务；</li><li>不同的邮件服务商可能有一些特殊的设置，比如网易，会给你一个客户端授权码，这个才是密码，而不是网页的登录密码。</li><li>注意服务商有没有对发信频率的限制。</li></ul></li><li>‘django’：使用console处理器，将信息输出。在开发的时候就可以使用这个处理器（什么？print？ 太low了！）</li><li>最后一个处理器见注</li><li>释</li></ul><h3 id="8）日志模块流程图"><a href="#8）日志模块流程图" class="headerlink" title="8）日志模块流程图"></a>8）日志模块流程图</h3><p><img src="//angeszhu.github.io/2019/06/03/django-setting/1.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django安装以及创建项目</title>
      <link href="/2019/06/01/install-django/"/>
      <url>/2019/06/01/install-django/</url>
      
        <content type="html"><![CDATA[<h2 id="Django安装以及创建项目"><a href="#Django安装以及创建项目" class="headerlink" title="Django安装以及创建项目"></a>Django安装以及创建项目</h2><h3 id="Django安装"><a href="#Django安装" class="headerlink" title="Django安装"></a>Django安装</h3><h4 id="Python版本以及Django版本选择"><a href="#Python版本以及Django版本选择" class="headerlink" title="Python版本以及Django版本选择"></a>Python版本以及Django版本选择</h4><p>Django2.0以上版本，支持Python3.4以上的版本，而取消对Python2的支持。</p><p>而Django 1.11是支持Python2.7的最后版本。</p><h4 id="压缩包下载安装"><a href="#压缩包下载安装" class="headerlink" title="压缩包下载安装"></a>压缩包下载安装</h4><p><a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">下载Django</a></p><p><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#sendkeys" target="_blank" rel="noopener">下载Python的第三方库包地址</a></p><p>下载 Django 压缩包，</p><p>解压并和Python安装目录放在同一个根目录，</p><p>进入 Django 目录，执行python setup.py install，</p><p>然后开始安装，Django将要被安装到Python的Lib下site-packages。</p><p><img src="//angeszhu.github.io/2019/06/01/install-django/1.png" alt></p><p>然后是配置环境变量，将这几个目录添加到系统环境变量中: </p><p>C:\Python33\Lib\site-packages\django;C:\Python33\Scripts。 </p><p>添加完成后就可以使用Django的django-admin.py命令新建工程了。</p><p><img src="//angeszhu.github.io/2019/06/01/install-django/2.png" alt></p><h4 id="Pip命令安装"><a href="#Pip命令安装" class="headerlink" title="Pip命令安装"></a>Pip命令安装</h4><p>在终端输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Django</span><br></pre></td></tr></table></figure><p>如果想要制定Django版本，那么可以输入，当然版本号可以根据需要来输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Django==2.0.5</span><br></pre></td></tr></table></figure><h4 id="检查Django是否安装成功"><a href="#检查Django是否安装成功" class="headerlink" title="检查Django是否安装成功"></a>检查Django是否安装成功</h4><p>输入以下命令进行检查：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import django</span><br><span class="line">django.__version__</span><br></pre></td></tr></table></figure><p>如果出现如下图一样的内容，那么证明你安装成功了。</p><p><img src="//angeszhu.github.io/2019/06/01/install-django/3.png" alt></p><h3 id="Django项目的创建"><a href="#Django项目的创建" class="headerlink" title="Django项目的创建"></a>Django项目的创建</h3><h4 id="1-命令行创建django项目"><a href="#1-命令行创建django项目" class="headerlink" title="1.命令行创建django项目"></a>1.命令行创建django项目</h4><p>在终端输入命令:django-admin startproject 项目名称</p><p>注意:你在哪个目录输入命令创建，你的项目就会创建到哪里 </p><h4 id="2-使用编译器创建Django项目"><a href="#2-使用编译器创建Django项目" class="headerlink" title="2.使用编译器创建Django项目"></a>2.使用编译器创建Django项目</h4><p>选择:File -&gt; New Project </p><p>选择django，填写django项目名称，</p><p>选择环境运行的sdk以及django配置，是否创建app，app名称等内容</p><p><img src="//angeszhu.github.io/2019/06/01/install-django/4.png" alt></p><h4 id="3-Django的目录结构"><a href="#3-Django的目录结构" class="headerlink" title="3.Django的目录结构"></a>3.Django的目录结构</h4><p><img src="//angeszhu.github.io/2019/06/01/install-django/5.png" alt></p><p>一个Django项目，可以包含多个项目应用，</p><p>这些应用在Django中，又可以称为app。 </p><p>每一个app代表网站的一个，或多个网页。</p><p>创建 app时，可以进入项目目录，</p><p>然后用命令： python manage.py startapp app名称 创建 </p><p>也可以在pycharm创建项目时，就一起创建好，pycharm给我们提供了这样的功能。</p><h4 id="4-Django项目的启动"><a href="#4-Django项目的启动" class="headerlink" title="4.Django项目的启动"></a>4.Django项目的启动</h4><p>1.命令行启动</p><p>python manage.py runserver 2.pycharm启动</p><p><img src="//angeszhu.github.io/2019/06/01/install-django/6.png" alt></p><p>在图中我们可以看到，右上角的运行附近，有一个选择框。 </p><p>这里可以选择我们的django项目，点击右侧三角，即可运行django调试服务器。 </p><p>而另外一个选项，Edit，可以配置我们django项目启动的一些信息，例如:ip、端口号等</p><p><img src="//angeszhu.github.io/2019/06/01/install-django/7.png" alt></p><p>如果没有Dj启动，也可以利用Edit添加一个Django启动。</p><p>但是添加的时候要跟Django配置的一样。</p><p><img src="//angeszhu.github.io/2019/06/01/install-django/8.png" alt></p><p><img src="//angeszhu.github.io/2019/06/01/install-django/9.png" alt></p><p>这里最重要的，就是在设置中，把setting加载进去。 </p><p>启动后在浏览器输入地址:127.0.0.1:8000 可以打开成功页面，即项目创建成功</p><p><img src="//angeszhu.github.io/2019/06/01/install-django/10.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django介绍</title>
      <link href="/2019/06/01/django-info/"/>
      <url>/2019/06/01/django-info/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Django"><a href="#什么是Django" class="headerlink" title="什么是Django"></a>什么是Django</h2><h3 id="django-Python-Web-框架"><a href="#django-Python-Web-框架" class="headerlink" title="django(Python Web 框架)"></a>django(Python Web 框架)</h3><blockquote><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MVC的框架模式，即模型M，视图V和控 制器C。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS(内容 管理系统)软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p></blockquote><h3 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h3><p>Django是一个基于MVC构造的框架。</p><p>但是在Django中，控制器接受用户输入的部分由框架自行处理，</p><p>所以 Django 里更关注的是模型(Model)、模板(Template)和视图(Views)，称为 MTV模式。</p><p>它们各自的职责 如下:</p><table><thead><tr><th>层次</th><th align="center">职责</th></tr></thead><tbody><tr><td>模型(Model)，即数 据存取层</td><td align="center">处理与数据相关的所有事务: 如何存取、如何验证有效性、包含哪些行为 以及数据之间的关系等。</td></tr><tr><td>模板(Template)，即表 现层</td><td align="center">处理与表现相关的决定: 如何在页面或其他类型文档中进行显示。</td></tr><tr><td>视图(View)，即业务 逻辑层</td><td align="center">存取模型及调取恰当模板的相关逻辑。模型与模板的桥梁。</td></tr></tbody></table><hr><p>从以上表述可以看出Django视图不处理用户输入，而仅仅决定要展现哪些数据给用户，</p><p>而Django模板仅仅决定如何展现Django视图指定的数据。</p><p>或者说, Django将MVC中的视图进一步分解为 Django视图 和 Django模板两个部分，</p><p>分别决定 “展现哪些数据” 和 “如何展现”，使得Django的模板可以根据需要随时替 换，而不仅仅限制于内置的模板。</p><hr><p>至于MVC控制器部分，由Django框架的URLconf来实现。URLconf机制是使用正则表达式匹配URL，</p><p>然后调 用合适的Python函数。URLconf对于URL的规则没有任何限制，你完全可以设计成任意的URL风格，</p><p>不管是 传统的，RESTful的，或者是另类的。</p><p>框架把控制层给封装了，无非与数据交互这层都是数据库表的读,写,删 除,更新的操作。</p><p>在写程序的时候，只要调用相应的方法就行了，感觉很方便。</p><p>程序员把控制层东西交给 Django自动完成了。 </p><p>只需要编写非常少的代码完成很多的事情。</p><p>所以，它比MVC框架考虑的问题要深一 步，因为我们程序员大都在写控制层的程序。</p><p>现在这个工作交给了框架，仅需写很少的调用代码，大大提高 了工作效率。</p><hr><p>Django的主要目的是简便、快速的开发数据库驱动的网站。</p><p>它强调代码复用，多个组件可以很方便的以“插 件”形式服务于整个框架，</p><p>Django有许多功能强大的第三方插件，你甚至可以很方便的开发出自己的工具包。</p><p>这使得Django具有很强的可扩展性。</p><p>它还强调快速开发和DRY(Do Not Repeat Yourself)原则。</p><hr><p>Django基于MVC的设计十分优美:</p><ul><li>对象关系映射 (ORM,object-relational mapping):<ul><li>以Python类形式定义你的数据模型，ORM将模型与 关系数据库连接起来，你将得到一个非常容易使用的数据库API，同时你也可以在Django中使用原始的 SQL语句。</li></ul></li><li>URL 分派:<ul><li>使用正则表达式匹配URL，你可以设计任意的URL，没有框架的特定限定。像你喜欢的一样 灵活。 </li></ul></li><li>模版系统:<ul><li>使用Django强大而可扩展的模板语言，可以分隔设计、内容和Python代码。并且具有可继 承性。 </li></ul></li><li>表单处理:<ul><li>你可以方便的生成各种表单模型，实现表单的有效性检验。可以方便的从你定义的模型实例 生成相应的表单。</li></ul></li><li>Cache系统:<ul><li>可以挂在内存缓冲或其它的框架实现超级缓冲 – 实现你所需要的粒度。 </li></ul></li><li>会话(session)，用户登录与权限检查，快速开发用户会话功能。 </li><li>国际化:<ul><li>内置国际化系统，方便开发出多种语言的网站。 </li></ul></li><li>自动化的管理界面:<ul><li>不需要你花大量的工作来创建人员管理和更新内容。Django自带一个ADMIN site, 类似于内容管理系统</li></ul></li></ul><h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><p><img src="//angeszhu.github.io/2019/06/01/django-info/1.png" alt></p><p>1.用manage .py runserver 启动Django服务器时就载入了在同一目录下的settings .py。该文件包含了项目 中的配置信息，如前面讲的URLConf等，其中最重要的配置就是ROOT_URLCONF，它告诉Django哪个 Python模块应该用作本站的URLConf，默认的是urls .py<br>2.当访问url的时候，Django会根据ROOT_URLCONF的设置来装载URLConf。 3.然后按顺序逐个匹配URLConf里的URLpatterns。如果找到则会调用相关联的视图函数，并把<br>HttpRequest对象作为第一个参数(通常是request) 4.最后该view函数负责返回一个HttpResponse对象</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>(点击可进入)</p><p><a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="noopener">The Django Book</a></p><p><a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django官方网站</a></p><p><a href="https://docs.djangoproject.com/zh-hans/2.2/intro/tutorial01/" target="_blank" rel="noopener">Django官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python环境的安装</title>
      <link href="/2019/05/31/install-python/"/>
      <url>/2019/05/31/install-python/</url>
      
        <content type="html"><![CDATA[<h2 id="Python安装以及Pycharm安装"><a href="#Python安装以及Pycharm安装" class="headerlink" title="Python安装以及Pycharm安装"></a>Python安装以及Pycharm安装</h2><p>本篇简单介绍一下Python的开发环境的安装</p><a id="more"></a><h3 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h3><blockquote><p>目前，根据数据显示，使用Python2.xd 开发者站63.7%，而使用Python3.x的用户站36.3%，由此可见使用使用Python2.x的用户还是占多数。2014年，Python的创始人宣布将Python2.7支持时间延长到2020年，那么初学者应该选择什么版本呢？目前建议初学者选择Python3.x版本<br>1、目前，使用Python3.x是大势所趋<br>2、Python3.x在Python2.x的基础上做了功能升级<br>3、Python3.x和Python2.x思想基本是共通的<br>当然选择Python3.x也会有缺点，那就是很多扩展库的发行总是滞后于Python的发行版本，甚至目前还有很多库不支持Python3.x。因此，在选择Python时候，一定要先考虑清楚自己的学习目的，例如，打算做哪方面的开发、需要用到哪些扩展库，以及扩展库支持的最高Python版本等。明确这些问题后再做出适合自己的选择。</p></blockquote><p>我们这里选择的介绍安装的版本是Python 3.7.2</p><h3 id="Python安装"><a href="#Python安装" class="headerlink" title="Python安装"></a>Python安装</h3><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><p>首先我们需要去官网选择我们想要下载的Python版本。</p><p><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">Python官网下载地址点击跳转</a></p><p><img src="//angeszhu.github.io/2019/05/31/install-python/downloadpage.png" alt></p><p>可以在页面中选择您想要下载安装的python版本</p><p>我们选择的版本是Python3.7.2 </p><p>选择版本后，进入下一个页面，页面拖到最下方，我们可以看到一个表格。</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/1.png" alt></p><p>我们可以在这个表格中，根据您的操作系统等，来选择您想要下载安装的Python安装包。 </p><p>我们本教程选择的版本是:</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/2.png" alt></p><p>点击后，即可下载Python安装包。</p><h4 id="安装Python（Windows系统）"><a href="#安装Python（Windows系统）" class="headerlink" title="安装Python（Windows系统）"></a>安装Python（Windows系统）</h4><p>双击我们下载好的安装包，打开安装界面(如下图)。</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/3.png" alt></p><p>红圈块的地方，给大家详细说明一下。 </p><h5 id="1-默认安装"><a href="#1-默认安装" class="headerlink" title="1.默认安装"></a>1.默认安装</h5><p>这里的默认安装，包含了Python的安装目录，我们可以看到红圈中的路径，那个路径，就是我们Python安装完的路径。</p><h5 id="2-自定义安装"><a href="#2-自定义安装" class="headerlink" title="2.自定义安装"></a>2.自定义安装</h5><p><img src="//angeszhu.github.io/2019/05/31/install-python/4.png" alt></p><p><img src="//angeszhu.github.io/2019/05/31/install-python/5.png" alt></p><p>在下面的步骤中，我们可以选择安装的很多内容，这里我们需要注意的就是这个安装目录。 </p><p>由于Window启动和运行的一些问题，我们并不推荐安装至C盘，所以大家尽量换一个盘来装。</p><p>我们这里换到了D盘。</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/6.png" alt></p><h5 id="3-添加Python至环境变量"><a href="#3-添加Python至环境变量" class="headerlink" title="3.添加Python至环境变量"></a>3.添加Python至环境变量</h5><p>环境变量这里，大家一定要勾选，因为可以节省我们很多事情。防止因为环境变量配置错误而出现异常。</p><p>点击安装后，Python就已经开始安装了。</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/7.png" alt></p><p>当出现如上图时，证明我们的Python就已经安装成功了。 </p><p>我们现在就可以来检查一下Python是否安装成功了。 </p><p>win+R 输入cmd 打开我们的dos界面，输入python</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/8.png" alt></p><p>当出现如上图时，证明我们的python正确安装了。 </p><p>输入pip，可以查看我们的pip是否可以正常使用。</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/9.png" alt></p><h4 id="安装Python（Mac系统）"><a href="#安装Python（Mac系统）" class="headerlink" title="安装Python（Mac系统）"></a>安装Python（Mac系统）</h4><p>因为系统中有一些内容是基于Python来运行，Mac系统是自带Python环境的。</p><p>但是这个Python环境版本为2.x的Python，想要直接使用Python2.x版本的Python，则不需要安装。</p><p>Mac系统中的Python安装就相对简单很多，只需要我们下载好安装包，安装就好。</p><p>他有很多内容并不需要我们来勾选。</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/10.png" alt></p><h3 id="多Python版本兼容"><a href="#多Python版本兼容" class="headerlink" title="多Python版本兼容"></a>多Python版本兼容</h3><h4 id="windows系统"><a href="#windows系统" class="headerlink" title="windows系统"></a>windows系统</h4><p>在一些情况下，我们的电脑需要安装两个版本的Python，那么就会有一个兼容的问题。</p><p>官方给我们提供了一个小工具:py.exe </p><p>py.exe存在于python3.X以上的版本，存在目录:C:\Windows</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/11.png" alt></p><p><strong>py.exe的使用:</strong></p><p><strong>Python启动:</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2.X: py -2 </span><br><span class="line">python3.X: py -3</span><br></pre></td></tr></table></figure><p><strong>Pip的启动:</strong></p><p>Pip的使用与正常pip使用一致，只是把命令pip替换成带有 目标版本的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2.X: py -2 –m pip </span><br><span class="line">python3.X: py -3 –m pip</span><br></pre></td></tr></table></figure><p><strong>Python启动声明python版本:</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2.X: #!python2 </span><br><span class="line">python3.X: #!python3</span><br></pre></td></tr></table></figure><p><img src="//angeszhu.github.io/2019/05/31/install-python/12.png" alt></p><h4 id="mac系统"><a href="#mac系统" class="headerlink" title="mac系统"></a>mac系统</h4><p>在mac中使用python，在命令上加上3即可。</p><p>Windows中的py.exe并不存在。 </p><p>相较windows来说，要简单很多，具体使用如下图：</p><p><img src="//angeszhu.github.io/2019/05/31/install-python/13.png" alt></p><h3 id="Pycharm安装"><a href="#Pycharm安装" class="headerlink" title="Pycharm安装"></a>Pycharm安装</h3><h4 id="下载以及安装"><a href="#下载以及安装" class="headerlink" title="下载以及安装"></a>下载以及安装</h4><p>首先我们需要去官网选择我们想要下载的Python版本。</p><blockquote><p>社区版：功能简单，可以满足日常练习以及写脚本的需求，但在项目级开发时，略显不足。</p></blockquote><blockquote><p>专业版：功能全面，可以满足所有的Python开发使用。</p></blockquote><p>社区版免费，专业版需要激活或者购买。</p><p><a href="https://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="noopener">Pycharm官网下载地址点击跳转</a></p><p>Windows下安装Pycharm，需注意安装路径不要有中文。 </p><p>Mac下直接把Pycharm安装到应用程序即可。</p><h4 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h4><ul><li>服务器激活 </li></ul><p><em>在license server中输入地址:<a href="http://xidea.online" target="_blank" rel="noopener">http://xidea.online</a> 地址不唯一，随意百度有很多可以使用的。</em></p><p><img src="//angeszhu.github.io/2019/05/31/install-python/14.png" alt></p><ul><li><p>修改时间方式(新版本不可用) </p><ol><li>Pycharm注册界面不动 </li><li>调整电脑系统时间2038年(时间随意) </li><li>注册界面选择申请30天试用</li><li>退出pycharm</li><li>电脑时间调整回正常时间</li></ol></li><li><p>淘宝购买全家桶账号激活 </p></li></ul><p><em>缺点:激活一次管一年，到期后要找客服免费续期</em></p><ul><li>网上下载jar包，修改配置激活</li></ul><p><em>但是要注意jar包与Pycharm版本的对应关系，并不是所有的版本都可以用一个jar包激活。</em></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术栈（简单整理）</title>
      <link href="/2019/05/31/Knowledge-system/"/>
      <url>/2019/05/31/Knowledge-system/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 日常需要 </category>
          
          <category> 寻找目标 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识体系 学习方向 职业规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown使用手册（持续更新）</title>
      <link href="/2019/05/29/Markdown-text/"/>
      <url>/2019/05/29/Markdown-text/</url>
      
        <content type="html"><![CDATA[<h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><blockquote><p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p></blockquote><a id="more"></a><h3 id="它的优缺点"><a href="#它的优缺点" class="headerlink" title="它的优缺点"></a>它的优缺点</h3><p>优点：</p><blockquote><p>1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br>2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可</p></blockquote><p>缺点：</p><blockquote><p>1、需要记一些语法（当然，是很简单。五分钟学会）。<br>2、有些平台不支持Markdown编辑模式。</p></blockquote><hr><h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h2><hr><h4 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h4><p>在想要设置为标题的文字前面加符号#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。<br>注：标准语法一般在#后跟个空格再写文字。<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="//angeszhu.github.io/2019/05/29/Markdown-text/title.png" alt="标题效果"></p><hr><h4 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h4><ul><li>加粗</li></ul><p>要加粗的文字左右分别用两个’*’号包起来</p><ul><li>斜体</li></ul><p>要倾斜的文字左右分别用一个’*’号包起来</p><ul><li>斜体加粗</li></ul><p>要倾斜和加粗的文字左右分别用三个’*’号包起来</p><ul><li>删除线</li></ul><p>要加删除线的文字左右分别用两个’~~’号包起来</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h4 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h4><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h4 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h4><p>三个或者三个以上的 - 或者 * 都可以。<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>效果如下：</p><hr><hr><hr><hr><h4 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h4><p>语法：<br>![图片alt](图片地址 ‘’图片title’’)</p><p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](https://www.baidu.com/link?url=Oshs7TTIS7ATkTi_mTNlFyP2mBI3Jpg9oRrO2kY9c7HsH1fxPGuV36DcNatRqI00WOvZVk9jqhCJugunwZd0szzwyJSL48TZqxexmJx_FxXn5vHaZ4R1XIFzXym_uWsh54i7241XpLSXkWYV71RZR-RRLeSiq-fOcSd-NPaY2jYqyIDN-tH_lvb_zX83bEJ2ciaV5f_HAF8xoEB3O6eWWvvB_iNnlYEEW4EBaaX73tOvcm-c4Iu_6A4LCncOSdADHdDOAYZbyP6dPTZaGbKjGdmZkxeTzN3Ln8EagEz7elDJCPlAlT3Xx3fr9v2TOVh9T_XonNm8XJ_jTtimSGNvh72wKSimrhns9kM-bio8Y6G_sPOcE91lAJfUyqmWOFQ4HNDo0U5uF-LXzL6qazjHZdAL4422LCf3OoQW8FywGDHmrL7pIoXKn3wGcIEjgf3IV-ZrfIDmq2UsfB7oxpENGMtQiGtjTqdJ5PFNxCxFMe-HykBsCjkl33t2raHgYco_QOId237Qzw7KTpmpDu5cm-uIYTrm9j0jjnjiwcJJyT-kk0xcySjOwk4FT2xBxo0I8h3rwhYUJkxXtDi1YHUyI5rvFo9UBxVnqLBV8mx0CcjRnxeDWWxpOKrfJSGz9aPERRR0ApPP1A3PlL8zKMLmE_&amp;timg=&amp;click_t=1559285904085&amp;s_info=1425_789&amp;wd=&amp;eqid=adaa6738000d4b05000000045cf0d08c &quot;小猫咪&quot;)</span><br></pre></td></tr></table></figure><p>由于Hexo对网络图片不太友好，大家就自己试效果吧。</p><p>上传本地图片直接点击导航栏的图片标志，选择图片即可</p><h4 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br></pre></td></tr></table></figure><p>title可加可不加</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[简书](http://jianshu.com)</span><br><span class="line">[百度](http://baidu.com)</span><br></pre></td></tr></table></figure><p>效果如下：<br><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a><br>注：Markdown本身语法不支持链接在新页面中打开。</p><h4 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h4><ul><li>无序列表</li></ul><p>语法：<br>无序列表用 - + * 任何一种都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br></pre></td></tr></table></figure><p>注意：- + * 跟内容之间都要有一个空格</p><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li><p>列表内容</p></li><li><p>有序列表</p></li></ul><p>语法：<br>数字加点<br>1.列表内容<br>2.列表内容<br>3.列表内容</p><p>注意：序号跟内容之间要有空格</p><p>效果如下：<br>1.列表内容<br>2.列表内容<br>3.列表内容</p><ul><li>列表嵌套</li></ul><p>上一级和下一级之间敲三个空格即可</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">* 一级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line"></span><br><span class="line">* 一级无序列表内容</span><br><span class="line">   1.二级有序列表内容</span><br><span class="line">   2.二级有序列表内容</span><br><span class="line">   3.二级有序列表内容</span><br><span class="line"></span><br><span class="line">1.一级有序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line"></span><br><span class="line">2.一级有序列表内容</span><br><span class="line">   1.二级有序列表内容</span><br><span class="line">   2.二级有序列表内容</span><br><span class="line">   3.二级有序列表内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li><p>一级无序列表内容</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li><p>一级无序列表内容<br> 1.二级有序列表内容<br> 2.二级有序列表内容<br> 3.二级有序列表内容</p></li></ul><p>1.一级有序列表内容</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul><p>2.一级有序列表内容<br>   1.二级有序列表内容<br>   2.二级有序列表内容<br>   3.二级有序列表内容</p><h4 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr></tbody></table><h4 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h4><p>语法：<br>单行代码：代码之间分别用一个反引号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`代码内容`</span><br></pre></td></tr></table></figure><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(```)</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p><p>示例：<br>单行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`create database hero;`</span><br></pre></td></tr></table></figure><p>代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(```)</span><br><span class="line">    function fun()&#123;</span><br><span class="line">         echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure><p>效果如下：<br>单行代码<br><code>create database hero;</code><br>代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">     echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure><h4 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h4><div id="flowchart-0" class="flow-chart"></div><ul><li><p>一个纯文本的语法怎么画图？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将流程图代码包含在```folw和```之间即可</span><br></pre></td></tr></table></figure></li><li><p>流程图代码分两块，上面一块是创建你的流程（创建元素），然后隔一行，创建流程的走向(连接元素)</p></li><li><p>创建流程（元素）：tag=&gt;type: content:&gt;url</p><ul><li>tag 是流程图中的标签，在第二段连接元素时会用到。名称可以任意，一般为流程的英文缩写和数字的组合。</li><li>type 用来确定标签的类型，=&gt;后面表示类型。由于标签的名称可以任意指定，所以要依赖type来确定标签的类型</li><li>标签有6种类型：start end operation subroutine condition inputoutput</li><li>content 是流程图文本框中的描述内容，: 后面表示内容，中英文均可。特别注意，冒号与文本之间一定要有个空格</li><li>url是一个连接，与框框中的文本相绑定，:&gt;后面就是对应的 url 链接，点击文本时可以通过链接跳转到 url 指定页面</li></ul></li><li><p>指向流程(连接元素)：标识（类别）-&gt;下一个标识</p><ul><li>使用 -&gt; 来连接两个元素</li><li>对于condition类型，有yes和no两个分支，如示例中的cond(yes)和cond(no)</li><li>每个元素可以制定分支走向，默认向下，也可以用right指向右边，如示例中cond2(yes,right)。</li></ul></li></ul><p>流程图元素</p><ul><li>开始<br>st=&gt;start: 开始</li><li>操作<br>op1=&gt;operation: 操作、执行说明</li><li>条件<br>cond=&gt;condition: 确认？</li><li>子程序<br>sub1=&gt;subroutine: 子程序操作说明</li><li>用户输入或输出<br>io1=&gt;inputoutput: 输入密码</li><li>结束<br>e=&gt;end: 结束</li></ul><h4 id="十一-整一个To-Do-List"><a href="#十一-整一个To-Do-List" class="headerlink" title="十一 整一个To Do List"></a>十一 整一个To Do List</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [x] 学习python基础 【减号+[+空格或x+]+空格】</span><br><span class="line">- [ ] 学习python网络编程</span><br></pre></td></tr></table></figure><ul><li><input checked disabled type="checkbox"> 学习python基础 【减号+[+空格或x+]+空格】</li><li><input disabled type="checkbox"> 学习python网络编程</li></ul><blockquote><p>参考资料：<a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">https://www.jianshu.com/p/191d1e21f7ed</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始 e=>end: 登录 io1=>inputoutput: 输入用户名密码 sub1=>subroutine: 数据库查询子类 cond=>condition: 是否有此用户 cond2=>condition: 密码是否正确 op=>operation: 读入用户信息st->io1->sub1->cond cond(yes,right)->cond2 cond(no)->io1(right) cond2(yes,right)->op->e cond2(no)->io1</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常需要 </category>
          
          <category> 文档编写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 文档编写 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
